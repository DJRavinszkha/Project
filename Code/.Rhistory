# mirna <- mirna[,index]
#
# # Remove drained cases from the phenotype data
# pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
# pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
return(list(mrna, mirna, labels, key))
}
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE) #Load miRNA expression data
colnames(mrna)[10] <- "FGS_10_410978_2_3_H" #Change the name of one variable due to error
#Initialise a dataframe called labels, containing all:
# file/batch names and sample names
# batch numbers and an int id attached to it
# treatments and an int id attached to it
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
labels$V4 <- colnames(mrna[3:30])
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
labels$V1 <- colnames(mirna[2:29]) #maintaining names for mirna filenames REMOOOVE!!
#Here we initialise batch number id's of mRNA's
labels$V5 <- substr(unlist(labels$V4), 8, 13)
labels$V6[labels$V5 == "410978"] <- 1 #set id 1 to mRNA batch
labels$V6[labels$V5 == "410979"] <- 2 #set id 2
labels$V6[labels$V5 == "410980"] <- 3 #set id 3
labels$V6[labels$V5 == "412287"] <- 4 #set id 4
#Here we initialise batch number id's for miRNA's
labels$V7 <- substr(unlist(labels$V1), 12, 23)
labels$V8[labels$V7 == "254606410403"] <- 1 #set id 1 to miRNA batch
labels$V8[labels$V7 == "254606410404"] <- 2 #set id 2
labels$V8[labels$V7 == "254606411109"] <- 5 #set id 3
labels$V8[labels$V7 == "254606410405"] <- 3 #set id 4
labels$V8[labels$V7 == "254606410413"] <- 4 #set id 5
#Change the names of the columns
colnames(labels) <- c("miRNA.file", "treatment", "sample.name", "mRNA.file", "mRNA.batch", "mRNA.batch.id", "miRNA.batch", "miRNA.batch.id")
#=== Here we initialise the treatment numbers ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
labels$treatment.id[labels$treatment == "cholestatic"] <- 1 #set id 1 to cholestatic treatment
labels$treatment.id[labels$treatment == "drained"] <- 2 #set id 2 to drained treatment
View(mirna)
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE) #Load miRNA expression data
colnames(mrna)[10] <- "FGS_10_410978_2_3_H" #Change the name of one variable due to error
#Initialise a dataframe called labels, containing all:
# file/batch names and sample names
# batch numbers and an int id attached to it
# treatments and an int id attached to it
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
labels$V4 <- colnames(mrna[3:30])
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
labels$V1 <- colnames(mirna[2:29]) #maintaining names for mirna filenames REMOOOVE!!
#Here we initialise batch number id's of mRNA's
labels$V5 <- substr(unlist(labels$V4), 8, 13)
labels$V6[labels$V5 == "410978"] <- 1 #set id 1 to mRNA batch
labels$V6[labels$V5 == "410979"] <- 2 #set id 2
labels$V6[labels$V5 == "410980"] <- 3 #set id 3
labels$V6[labels$V5 == "412287"] <- 4 #set id 4
#Here we initialise batch number id's for miRNA's
labels$V7 <- substr(unlist(labels$V1), 12, 23)
labels$V8[labels$V7 == "254606410403"] <- 1 #set id 1 to miRNA batch
labels$V8[labels$V7 == "254606410404"] <- 2 #set id 2
labels$V8[labels$V7 == "254606411109"] <- 5 #set id 3
labels$V8[labels$V7 == "254606410405"] <- 3 #set id 4
labels$V8[labels$V7 == "254606410413"] <- 4 #set id 5
#Change the names of the columns
colnames(labels) <- c("miRNA.file", "treatment", "sample.name", "mRNA.file", "mRNA.batch", "mRNA.batch.id", "miRNA.batch", "miRNA.batch.id")
#=== Here we initialise the treatment numbers ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
labels$treatment.id[labels$treatment == "cholestatic"] <- 1 #set id 1 to cholestatic treatment
labels$treatment.id[labels$treatment == "drained"] <- 2 #set id 2 to drained treatment
labels$treatment.id[labels$treatment == "control"] <- 3 #set id 3 to control treatment
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#mrna
rownames(mrna) <- mrna[,1] # Set entrezid as index for mrna; can use key to find gene symbols based on index
mrna <- mrna[,2:29] #Set mrna to only contain expression values
#mirna
rownames(mirna) <- mirna[,1] # Set mirna names as index for mirna
mirna <- mirna[,2:29] #set mirna to only contain expression values
View(mirna)
format <- function(){
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)        #Load miRNA expression data
colnames(mrna)[10] <- "FGS_10_410978_2_3_H"                                   #Change the name of one variable due to error
#Initialise a dataframe called labels, containing all:
# file/batch names and sample names
# batch numbers and an int id attached to it
# treatments and an int id attached to it
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
labels$V4 <- colnames(mrna[3:30])
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
labels$V1 <- colnames(mirna[2:29]) #maintaining names for mirna filenames
#Here we initialise batch number id's of mRNA's
labels$V5 <- substr(unlist(labels$V4), 8, 13)
labels$V6[labels$V5 == "410978"] <- 1 #set id 1 to mRNA batch
labels$V6[labels$V5 == "410979"] <- 2 #set id 2
labels$V6[labels$V5 == "410980"] <- 3 #set id 3
labels$V6[labels$V5 == "412287"] <- 4 #set id 4
#Here we initialise batch number id's for miRNA's
labels$V7 <- substr(unlist(labels$V1), 12, 23)
labels$V8[labels$V7 == "254606410403"] <- 1 #set id 1 to miRNA batch
labels$V8[labels$V7 == "254606410404"] <- 2 #set id 2
labels$V8[labels$V7 == "254606411109"] <- 5 #set id 3
labels$V8[labels$V7 == "254606410405"] <- 3 #set id 4
labels$V8[labels$V7 == "254606410413"] <- 4 #set id 5
#Change the names of the columns
colnames(labels) <- c("miRNA.file", "treatment", "sample.name", "mRNA.file", "mRNA.batch", "mRNA.batch.id", "miRNA.batch", "miRNA.batch.id")
#=== Here we initialise the treatment numbers ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
labels$treatment.id[labels$treatment == "cholestatic"] <- 1 #set id 1 to cholestatic treatment
labels$treatment.id[labels$treatment == "drained"] <- 2     #set id 2 to drained treatment
labels$treatment.id[labels$treatment == "control"] <- 3     #set id 3 to control treatment
# Column names are different for miRNA and mRNA datasets, but are conserved with sample names in SampleGroups.xlsx
#IE FGS_01 is the name of sample 1;
#where miRNA sample is US10063773_254606410403_S01_miRNA_107_Sep09_1_1 - 2;
#and mRNA sample is FGS_01_410978_1_1
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2)                     # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns                            # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#mrna
rownames(mrna) <- mrna[,1] # Set entrezid as index for mrna; can use key to find gene symbols based on index
mrna <- mrna[,2:29]        # Set mrna to only contain expression values
#mirna
rownames(mirna) <- mirna[,1] # Set mirna names as index for mirna
mirna <- mirna[,2:29]        # Set mirna to only contain expression values
#=============================#
##   Create phenotype data   ##     # Do we need this?
#=============================#
# pheno.mrna = labels
# pheno.mrna[[1]] <- colnames(mrna)
# colnames(pheno.mrna) <- c("", "Subtype", "ER")
#
# # Set controls
# case <- pheno.mrna[,'Subtype'] == "cholestatic"
# pheno.mrna[case,3] <- 'case'
#
# # Set drained
# case <- pheno.mrna[,'Subtype'] == "drained"
# pheno.mrna[case,3] <- 'case'
#
# # set controls
# case <- pheno.mrna[,'Subtype'] == "control"
# pheno.mrna[case,3] <- 'control'
#
# # Order cases and controls
# pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
#
# # Set pheno.mirna which is identical to pheno.mrna
# pheno.mirna = pheno.mrna
#
#===============================#
## Summarised experiment class ##   #Do we need this?
#===============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
# pheno.mrna <- as.matrix(pheno.mrna)
# pheno.mirna <- as.matrix(pheno.mirna)
# mrna = data.matrix(mrna)
# mirna = data.matrix(mirna)
#
# # Fill NA's with mean for the time-being
# mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
# mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
#
# # Remove drained cases from mrna
# index = rep(TRUE, length(colnames(mrna)))
# for(i in 1:length(colnames(mrna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mrna <- mrna[,index]
#
# # Remove drained cases from mirna
# index = rep(TRUE, length(colnames(mirna)))
# for(i in 1:length(colnames(mirna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mirna <- mirna[,index]
#
# # Remove drained cases from the phenotype data
# pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
# pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
return(list(mrna, mirna, labels, key))
}
#=========================================#
##           Initialise Data             ##
#=========================================#
Data <- format() #Remember to run dataFormatting.R first before initialising data
mrna <- data.frame(Data[1]) #mRNA expression data (contains entrez ID as index)
mirna <- data.frame(Data[2]) #miRNA expression data (contains miRNA name as index)
labels <- data.frame(Data[3]) #batch and treatment id/labels for samples
key <- data.frame(Data[4]) #entrezID to genesymbol key
View(labels)
View(mirna)
View(mirna)
View(mirna)
colnames(mirna[2:29])
#=========================================#
##           Initialise Data             ##
#=========================================#
Data <- format() #Remember to run dataFormatting.R first before initialising data
mrna <- data.frame(Data[1]) #mRNA expression data (contains entrez ID as index)
format <- function(){
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)        #Load miRNA expression data
colnames(mrna)[10] <- "FGS_10_410978_2_3_H"                                   #Change the name of one variable due to error
#Initialise a dataframe called labels, containing all:
# file/batch names and sample names
# batch numbers and an int id attached to it
# treatments and an int id attached to it
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
labels$V4 <- colnames(mrna[3:30])
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
labels$V1 <- colnames(mirna[2:29]) #maintaining names for mirna filenames
#Here we initialise batch number id's of mRNA's
labels$V5 <- substr(unlist(labels$V4), 8, 13)
labels$V6[labels$V5 == "410978"] <- 1 #set id 1 to mRNA batch
labels$V6[labels$V5 == "410979"] <- 2 #set id 2
labels$V6[labels$V5 == "410980"] <- 3 #set id 3
labels$V6[labels$V5 == "412287"] <- 4 #set id 4
#Here we initialise batch number id's for miRNA's
labels$V7 <- substr(unlist(labels$V1), 12, 23)
labels$V8[labels$V7 == "254606410403"] <- 1 #set id 1 to miRNA batch
labels$V8[labels$V7 == "254606410404"] <- 2 #set id 2
labels$V8[labels$V7 == "254606411109"] <- 5 #set id 3
labels$V8[labels$V7 == "254606410405"] <- 3 #set id 4
labels$V8[labels$V7 == "254606410413"] <- 4 #set id 5
#Change the names of the columns
colnames(labels) <- c("miRNA.file", "treatment", "sample.name", "mRNA.file", "mRNA.batch", "mRNA.batch.id", "miRNA.batch", "miRNA.batch.id")
#=== Here we initialise the treatment numbers ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
labels$treatment.id[labels$treatment == "cholestatic"] <- 1 #set id 1 to cholestatic treatment
labels$treatment.id[labels$treatment == "drained"] <- 2     #set id 2 to drained treatment
labels$treatment.id[labels$treatment == "control"] <- 3     #set id 3 to control treatment
# Column names are different for miRNA and mRNA datasets, but are conserved with sample names in SampleGroups.xlsx
#IE FGS_01 is the name of sample 1;
#where miRNA sample is US10063773_254606410403_S01_miRNA_107_Sep09_1_1 - 2;
#and mRNA sample is FGS_01_410978_1_1
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2)                     # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns                            # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#mrna
rownames(mrna) <- mrna[,1] # Set entrezid as index for mrna; can use key to find gene symbols based on index
mrna <- mrna[,2:29]        # Set mrna to only contain expression values
#mirna
rownames(mirna) <- mirna[,1] # Set mirna names as index for mirna
mirna <- mirna[,2:29]        # Set mirna to only contain expression values
#=============================#
##   Create phenotype data   ##     # Do we need this?
#=============================#
# pheno.mrna = labels
# pheno.mrna[[1]] <- colnames(mrna)
# colnames(pheno.mrna) <- c("", "Subtype", "ER")
#
# # Set controls
# case <- pheno.mrna[,'Subtype'] == "cholestatic"
# pheno.mrna[case,3] <- 'case'
#
# # Set drained
# case <- pheno.mrna[,'Subtype'] == "drained"
# pheno.mrna[case,3] <- 'case'
#
# # set controls
# case <- pheno.mrna[,'Subtype'] == "control"
# pheno.mrna[case,3] <- 'control'
#
# # Order cases and controls
# pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
#
# # Set pheno.mirna which is identical to pheno.mrna
# pheno.mirna = pheno.mrna
#
#===============================#
## Summarised experiment class ##   #Do we need this?
#===============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
# pheno.mrna <- as.matrix(pheno.mrna)
# pheno.mirna <- as.matrix(pheno.mirna)
# mrna = data.matrix(mrna)
# mirna = data.matrix(mirna)
#
# # Fill NA's with mean for the time-being
# mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
# mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
#
# # Remove drained cases from mrna
# index = rep(TRUE, length(colnames(mrna)))
# for(i in 1:length(colnames(mrna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mrna <- mrna[,index]
#
# # Remove drained cases from mirna
# index = rep(TRUE, length(colnames(mirna)))
# for(i in 1:length(colnames(mirna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mirna <- mirna[,index]
#
# # Remove drained cases from the phenotype data
# pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
# pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
return(list(mrna, mirna, labels, key))
}
#=========================================#
##           Initialise Data             ##
#=========================================#
Data <- format() #Remember to run dataFormatting.R first before initialising data
mrna <- data.frame(Data[1]) #mRNA expression data (contains entrez ID as index)
mirna <- data.frame(Data[2]) #miRNA expression data (contains miRNA name as index)
labels <- data.frame(Data[3]) #batch and treatment id/labels for samples
key <- data.frame(Data[4]) #entrezID to genesymbol key
#Initialise Sample Groups
sampleGroups <- data.frame(treatment = labels$treatment, treatment.id = labels$treatment.id, sampleName = labels$sample.name)
# Get treatment order mrna
mrna.treatmentOrder <- matrix(nrow = (ncol(mrna)), ncol = 1)
colnames(mrna.treatmentOrder) <- "sampleName"
mrna.treatmentOrder[,1] <- colnames(mrna)
mrna.treatmentOrder <- merge(mrna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
# Get treatment order mirna
mirna.treatmentOrder <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(mirna.treatmentOrder) <- "sampleName"
mirna.treatmentOrder[,1] <- colnames(mirna)
mirna.treatmentOrder <- merge(mirna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
mirna.treatmentOrder <- mirna.treatmentOrder[order(mirna.treatmentOrder$treatment.id),] #order based on treatment ID
# Get batch order mrna
mrna.batches <- data.frame(batch = labels$mRNA.batch, batch.id = labels$mRNA.batch.id, file = labels$mRNA.file)
# Get batch order mirna
mirna.batches <- data.frame(batch = labels$miRNA.batch, batch.id = labels$miRNA.batch.id, file = labels$mRNA.file, sort= FALSE)
PCA <- function(data,
data.treatmentOrder,
treat,
data.batch,
title1,
title2){
#Usage:
#   PCA(mirna,
#       mirna.treatmentOrder$treatment,
#       0,
#       mirna.batches$batch,
#       "miRNA pca coloured by Treatment",
#       "miRNA pca coloured by Batch"
#   )
pcaRes_data <- pca(t(data),nPcs = 10)  # perform PCA
data.PCA <- data.frame(c(pcaRes_data@scores[,1]),
pcaRes_data@scores[,2],
pcaRes_data@scores[,3],
pcaRes_data@scores[,4],
pcaRes_data@scores[,5],
treat = data.treatmentOrder)
colnames(data.PCA) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
if(treat != 0){
#need this if loop because we either use a value generated in function for x (as in PCA for mRNA and miRNA)
# - please refer to lines 16 and 58 in PCA_longversin.R
# or we prescribe it a value (as in PCA for corrected mRNA)
# - pleasw refer to line 101 in PCA_longversin.R
Treatment = treat
} else{
Treatment = data.PCA$treat
}
##==== Colouring by treatment ====##
plot1 <- ggplot(data.PCA, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = Treatment)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") + theme_light() +
ggtitle(title1)
##==== Colouring by batch ====##
plot2 <- ggplot(data.PCA, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = data.batch)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") + theme_light() +
ggtitle(title2)
## !!!!!!! ##
#install.packages("cowplot") ## !!!!!! ## <<<<<------ need to install
library(cowplot)
plot_grid(plot1, plot2, labels = "AUTO")
}
#=========================#
## 3. PCA for mRNA DATA  ##
#=========================#
# Notes: 1. Batch_number_mrna changed to mrna.batches
#        2. Batch_num changed to batch
#        3. PCA_mrna changed to mrna.PCA
#        4. Treatment changed to treatment
#MRNA for 28 samples
mrna[is.na(mrna)] <- NA # change Nan for NA
PCA(mrna, #data
mrna.treatmentOrder$treatment, #treatment order
0, #treatment color
mrna.batches$batch, #batch color
"mRNA pca coloured by Treatment", #title1
"mRNA pca coloured by Batch"#title2
)
PCA(mirna, #data
mirna.treatmentOrder$treatment, #treatment order
0, #treatment color
mirna.batches$batch, #batch color
"miRNA pca coloured by Treatment",#title1
"miRNA pca coloured by Batch" #title2
)
# Anova testing mRNA
mrna.means <- data.frame(means= rowMeans(t(mrna),na.rm = TRUE))
mrna.Anova <- aov(mrna.means[,1]~mrna.batches[,1])
TukeyHSD(mrna.Anova, ordered = FALSE, conf.level = 0.95)
# Anova Testing miRna
mirna.means <- data.frame(means= rowMeans(t(mirna),na.rm = TRUE))
mirna.Anova<- aov(mirna.means[,1]~mirna.batches[,1])
TukeyHSD(mirna.Anova, ordered = FALSE, conf.level = 0.95)
#==============================#
## 8. Batch effect correction ##
#==============================#
# Perform correction
##====  mRNA corrected  ====##
mrna.corrected <- removeBatchEffect(mrna, batch = factor(mrna.batches$batch.id))
##====  miRNA corrected  ====##
mirna.corrected <- removeBatchEffect(mirna, batch = factor(mirna.batches$batch.id))
# Correction boxplot
boxplot(as.data.frame(mrna),main="Original")
boxplot(as.data.frame(mrna.corrected),main="Batch corrected")
##====  mRNA corrected  ====##
PCA(mrna.corrected, #data
mrna.batches$batch, #batch order
mrna.treatmentOrder$treatment, #treatment color
mrna.batches$batch, #batch color
"mRNA corrected pca coloured by Treatment",  #title1
"mRNA corrected pca coloured by Batch" #title2
)
##====  miRNA corrected  ====##
PCA(mirna.corrected, #data
mirna.batches$batch, #batch order
mirna.treatmentOrder$treatment, #treatment color
mirna.batches$batch, #batch color
"miRNA corrected pca coloured by Treatment",  #title1
"miRNA corrected pca coloured by Batch" #title2
)
View(mirna)
