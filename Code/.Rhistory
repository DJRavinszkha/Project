columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim('../Data/SampleGroups.csv', sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit <- lmFit(mrna[, 2:29], design_matrix)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, p.value = "0.05", number = nrow(mrna), adjust = "BH")
for (i in 1:ncol(fit_contrast)){
volcanoplot(fit_contrast[,i], main= colnames(fit_contrast)[i], col=ifelse(fit_contrast[,i]$p.value > 0.05,"red","black"))
abline(-log10(0.05),0)
abline(v=log2(2))
abline(v=-log2(2))
}
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim('../Data/colNames.csv', sep = ',', header = FALSE, colClasses = 'character')
View(labels)
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
View(mirna)
View(mrna)
#############  PCA FOR BATCHES  ######################
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
View(mrna)
#############  PCA FOR BATCHES  ######################
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
View(mrna)
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
View(mrna)
mrna = subset(mrna, select = -2) # Remove gene symbol column
View(mrna)
columns = colnames(mrna)
View(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 8, 13) #Only keep the batch number
columns[2:29] <- data.frame(substr(unlist(columns[2:29]), 8, 13)) #Only keep the batch number
View(columns)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna[,2:29])
batch_number <- data.frame(substr(unlist(columns[2:29]), 8, 13)) #Only keep the batch number
View(batch_number)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna[,2:length(mrna)])
columns
batch_number <- data.frame(substr(unlist(columns[2:29]), 8, 13)) #Only keep the batch number
View(batch_number)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = data.frame(colnames(mrna[,2:length(mrna)]))
View(columns)
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = data.frame(colnames(mrna[,2:length(mrna)]))
batch_number <- data.frame(substr(unlist(columns), 8, 13)) #Only keep the batch number
View(batch_number)
View(columns)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
View(mrna)
columns = data.frame(colnames(mrna[,2:length(mrna)]))
View(columns)
batch_number <- data.frame(substr(unlist(columns), 8, 13)) #Only keep the batch number
View(batch_number)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
View(batch_number_mrna)
sampleGroups <- read.delim('../Data/SampleGroups.csv', sep = ',', header = TRUE, colClasses = 'character')
View(sampleGroups)
sampleGroups <- read.delim('../Data/SampleGroups.csv', sep = ',', header = TRUE, colClasses = 'character')
View(sampleGroups)
View(batch_number_mrna)
View(batch_number_mrna)
View(batch_number)
View(batch_number)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
View(batch_number)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
View(mirna)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
View(mrna)
names_mrna = colnames(mrna[,2:length(mrna)]) #
View(mrna)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
View(batch_number_mrna)
View(columns)
View(batch_number_mrna)
View(batch_number)
batch_number==batch_number_mrna
View(sampleGroups)
View(sampleGroups)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
View(mirna)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
View(mirna)
colnames(mirna)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(names_mirna), 12, 23)) #Only keep the batch number
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(mirna), 12, 23)) #Only keep the batch number
View(batch_number_mrna)
View(batch_number_mirna)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(mirna), 12, 23)) #Only keep the batch number
View(batch_number_mrna)
View(batch_number_mirna)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(colnames(mirna)), 12, 23)) #Only keep the batch number
View(batch_number_mrna)
View(batch_number_mirna)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(colnames(mirna[,2:length(mirna)])), 12, 23)) #Only keep the batch number
View(batch_number_mrna)
View(batch_number_mirna)
mrna[is.na(mrna)] <- NA # change Nan for NA
name_batches<- unique(batch_number_mrna)
View(name_batches)
name_batches_mirna<- unique(batch_number_mirna)
View(sampleGroups)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
require(gplots)
require(ggplot2)
library(FactoMineR)
require(limma)
require(pcaMethods)
require(gplots)
require(ggplot2)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch=batch_number_mrna)
colnames(PCA_28mrna) = name_batches
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$batch)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
View(mrna)
colnames(PCA_28mrna) = name_batches
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$batch)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch=batch_number_mrna)
colnames(PCA_28mrna) = name_batches
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$batch)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
View(PCA_28mrna)
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
View(PCA_28mrna)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = name_batches
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$Batch_num)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
colnames(PCA_28mrna) = name_batches
View(PCA_28mrna)
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c(name_batches)
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$Batch_num)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
c(name_batches)
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
View(PCA_28mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$Batch_num)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
View(sampleGroups)
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(colnames(mirna[,2:length(mirna)])), 12, 23)) #Only keep the batch number
name_batches_mirna<- unique(batch_number_mirna)
pcaRes2 <- pca(t(mirna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mirna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mirna)
colnames(PCA_28mirna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mirna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mirna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, p.value = "0.05", number = nrow(mirna), adjust = "BH")
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
library(anamiR)
library(rstudioapi)
library(limma)
library(qvalue)
library(tidyverse)
# =================================================================================================================================
# 1. Import the file into your R session and define the main directories
# =================================================================================================================================
#Change the directories to your assigned folder.
DATA.DIR <- "C:/Users/patar/OneDrive/Documenten/Project period 3/Project/Data"
RESULTS.DIR <- "C:/Users/patar/OneDrive/Documenten/Project period 3/Project/Data"
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
mrna[is.na(mrna)] <- NA # Change all the NaNs to NA in the mRNA object.
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim('../Data/colNames.csv', sep = ',', header = FALSE, colClasses = 'character')
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim('../Data/SampleGroups.csv', sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit <- lmFit(mrna[, 2:29], design_matrix)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, p.value = "0.05", number = nrow(mrna), adjust = "BH")
for (i in 1:ncol(fit_contrast)){
volcanoplot(fit_contrast[,i], main= colnames(fit_contrast)[i], col=ifelse(fit_contrast[,i]$p.value > 0.05,"red","black"))
abline(-log10(0.05),0)
abline(v=log2(2))
abline(v=-log2(2))
}
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, p.value = "0.05", number = nrow(mirna), adjust = "BH")
for (i in 1:ncol(fit_contrast2)){
volcanoplot(fit_contrast2[,i], main= colnames(fit_contrast2)[i], col=ifelse(fit_contrast2[,i]$p.value > 0.05,"red","black"))
abline(-log10(0.05),0)
abline(v=log2(2))
abline(v=-log2(2))
}
mrna_drained_v_control_pvalue <- qvalue(fit_contrast$p.value[,1])
mrna_cholestasis_v_control_pvalue <- qvalue(fit_contrast$p.value[,2])
mrna_cholestasis_v_drained_pvalue <- qvalue(fit_contrast$p.value[,3])
# Adjust all p values using qvalue() for the miRNA set
mirna_drained_v_control_pvalue <- qvalue(fit_contrast2$p.value[,1])
mirna_cholestasis_v_control_pvalue <- qvalue(fit_contrast2$p.value[,2])
mirna_cholestasis_v_drained_pvalue <- qvalue(fit_contrast2$p.value[,3])
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, p.value = "0.05", number = nrow(mirna), adjust = "BH")
View(mrna_drained_v_control_pvalue)
summary(results2)
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
View(fit_contrast2)
summary(results2)
View(fit2)
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
View(top_genes2)
View(mrna_drained_v_control_pvalue)
?topTable()
View(fit_contrast)
pairwise.t.test
pairwise.t.test
?pairwise.t.test
View(sampleGroups)
View(sampleGroups)
find(sampleGroups== "cholestatic")
find(sampleGroups$Treatment == "cholestatic")
sampleGroups[which(sampleGroups$Treatment == "cholestatic")]
sampleGroups[which(sampleGroups$Treatment == "cholestatic")]
sampleGroups[,which(sampleGroups$Treatment == "cholestatic")]
sampleGroups[,which(sampleGroups$Treatment == "cholestatic")]
which(sampleGroups$Treatment == "cholestatic")
View(sampleGroups)
sampleGroups[1]
sampleGroups[2,which(sampleGroups$Treatment == "cholestatic")]
sampleGroups[2,which(sampleGroups$Treatment == "cholestatic")]
sampleGroups[1]which(sampleGroups$Treatment == "cholestatic")
which(sampleGroups$Treatment == "cholestatic")
sampleGroups[2,c(which(sampleGroups$Treatment == "cholestatic"))]
which(sampleGroups$Treatment == "cholestatic")
a<-which(sampleGroups$Treatment == "cholestatic")
a<-c(which(sampleGroups$Treatment == "cholestatic"))
a<-c(which(sampleGroups$Treatment == "cholestatic"))
a<-data.frame(which(sampleGroups$Treatment == "cholestatic"))
sampleGroups["cholestatic"]
sampleGroups[1,2]
a<-sampleGroups[which(sampleGroups$Treatment == "cholestatic")]
which(sampleGroups$Treatment == "cholestatic")
a<-sampleGroups[data.frame(which(sampleGroups$Treatment == "cholestatic"))]
which(sampleGroups$Treatment == "cholestatic")
a<- subset(sampleGroups, "control")
View(sampleGroups)
?subset
a<- subset(sampleGroups, Treatment== "control")
View(a)
View(a)
View(sampleGroups)
controls<- subset(sampleGroups, Treatment== "control")
cholestatic<- subset(sampleGroups, Treatment== "cholestatic")
drained<- subset(sampleGroups, Treatment== "drained")
View(mirna)
View(controls)
match(drained$SampleName, colnames(mrna)
a<-match(drained$SampleName, colnames(mrna)
a<-match(drained$SampleName, colnames(mrna))
a<-mrna[match(drained$SampleName, colnames(mrna))]
View(a)
View(drained)
View(a)
?pairwise.t.test
