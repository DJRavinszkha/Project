# Order cases and controls
pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
# Set pheno.mirna which is identical to pheno.mrna
pheno.mirna = pheno.mrna
#=============================#
# Summarised experiment class #
#=============================#
# Set rownames for mrna
rownames(mrna) <- mrna[,1]
mrna <- mrna[,2:29]
# Set rownames for mirna
rownames(mirna) <- mirna[,1]
mirna <- mirna[,2:29]
# First we change the dataframes into matrices as the miRrna package works with matrices.
pheno.mrna <- as.matrix(pheno.mrna)
pheno.mirna <- as.matrix(pheno.mirna)
mrna = data.matrix(mrna)
mirna = data.matrix(mirna)
# Fill NA's with mean for the time-being
mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
# Remove drained cases from mrna
index = rep(TRUE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mrna <- mrna[,index]
# Remove drained cases from mirna
index = rep(TRUE, length(colnames(mirna)))
for(i in 1:length(colnames(mirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mirna <- mirna[,index]
# Remove drained cases from the phenotype data
pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
# Set first column of phenotype data as rowname
rownames(pheno.mrna) <- pheno.mrna[,1]
pheno.mrna <- pheno.mrna[,2:3]
pheno.mirna <- pheno.mrna # pheno.mirna is identical to pheno.mrna (for clarity they both exist)
hjbjh
kjfdsjafnds
clc
clear
clear
clearPushBack()
source('C:/Users/jipde/OneDrive/school/1. Master/Project_01/Code/Github/Code/Expression_Analysis.R')
library(anamiR)
library(limma)
library(rstudioapi)
#library(anamiR)
library(limma)
library(rstudioapi)
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE) #Load miRNA expression data
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
# Column names are different for miRNA and mRNA datasets, but are conserved with sample names in SampleGroups.xlsx
#IE FGS_01 is the name of sample 1;
#where miRNA sample is US10063773_254606410403_S01_miRNA_107_Sep09_1_1 - 2;
#and mRNA sample is FGS_01_410978_1_1
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
# Set rownames for mrna
rownames(mrna) <- mrna[,1]
mrna <- mrna[,2:29]
# Set rownames for mirna
rownames(mirna) <- mirna[,1]
mirna <- mirna[,2:29]
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
#=============================#
# Different gene expression  #
#=============================#
# First we identify differentially expressed genes for the mRNA's
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit <- lmFit(mrna, design_matrix)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, number = nrow(mrna), adjust = "BH")
# Subsequently we do the same for the miRNA data
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
#Here we change NA's with rownmeans SHOULD BE CHANGED LATER!!!
omitmirna <- mirna
omitmirna[is.na(omitmirna)] <- mean(as.matrix(mirna), na.rm = TRUE)
fit2 <- lmFit(omitmirna, design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
#=============================#
# Create phenotype data       #
#=============================#
pheno.mrna = labels
pheno.mrna[[1]] <- colnames(mrna)
colnames(pheno.mrna) <- c("", "Subtype", "ER")
# Set controls
case <- pheno.mrna[,'Subtype'] == "cholestatic"
pheno.mrna[case,3] <- 'case'
# Set drained
case <- pheno.mrna[,'Subtype'] == "drained"
pheno.mrna[case,3] <- 'case'
# set controls
case <- pheno.mrna[,'Subtype'] == "control"
pheno.mrna[case,3] <- 'control'
# Order cases and controls
pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
# Set pheno.mirna which is identical to pheno.mrna
pheno.mirna = pheno.mrna
#=============================#
# Summarised experiment class #
#=============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
pheno.mrna <- as.matrix(pheno.mrna)
pheno.mirna <- as.matrix(pheno.mirna)
mrna = data.matrix(mrna)
mirna = data.matrix(mirna)
# Fill NA's with mean for the time-being
mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
# Remove drained cases from mrna
index = rep(TRUE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mrna <- mrna[,index]
# Remove drained cases from mirna
index = rep(TRUE, length(colnames(mirna)))
for(i in 1:length(colnames(mirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mirna <- mirna[,index]
# Remove drained cases from the phenotype data
pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
#=============================#
# Change DE gene table format #
#=============================#
# First we change the layout for the mRNA data
mrna_d <- top_genes[,c(2,6,7)]
mrna_d[["mean_case"]] <- 0
mrna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,3]=="case",1]){
index[i] <- TRUE
}
}
mrna.case <- mrna[,index]
mrna.control <- mrna[,!index]
# Calculate means
mean_control <- rowMeans(mrna.control)
mean_case <- rowMeans(mrna.case)
# Include means in mrna_d
mrna_d[[4]] <- mean_case
mrna_d[[5]] <- mean_control
colnames(mrna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
#=============================================#
# Now we change the format for the miRNA data #
#=============================================#
mirna_d <- top_genes2[,c(2,6,7)]
mirna_d[["mean_case"]] <- 0
mirna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(omitmirna)))
for(i in 1:length(colnames(omitmirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(omitmirna)[i] %in% pheno.mirna[pheno.mirna[,3]=="case",1]){
index[i] <- TRUE
}
}
mirna.case <- omitmirna[,index]
mirna.control <- omitmirna[,!index]
# Calculate means
mean_control <- rowMeans(mirna.control[,2:length(mirna.control)])
mean_case <- rowMeans(mirna.case[,2:length(mirna.case)])
# Include means in omitmirna
mirna_d[[4]] <- mean_case
mirna_d[[5]] <- mean_control
colnames(mirna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
# # Set first column of phenotype data as rowname
# rownames(pheno.mrna) <- pheno.mrna[,1]
# pheno.mrna <- pheno.mrna[,2:3]
# pheno.mirna <- pheno.mrna # pheno.mirna is identical to pheno.mrna (for clarity they both exist)
#
corMatrix <- read_csv("../data/cor_data_small.csv")
corMatrix <- read.csv("../data/cor_data_small.csv")
View(corMatrix)
corMatrix <- read.csv("../data/cor_data_small.csv", row.names = TRUE)
corMatrix <- read.csv("../data/cor_data_small.csv", row.names = 1)
corMatrix$p.value
# Correct for multiple testing
corMatrix$"p.adjust" <- p.adjust(corMatrix$p.value, method = "BH")
corMatrixSign <- corMatrix[corMatrix$p.adjust < 0.05]
View(corMatrixSign)
corMatrixSign <- corMatrix[corMatrix$p.value < 0.05]
corMatrix$p.value
corMatrixSign <- corMatrix[as.numeric(corMatrix$p.value) < 0.05]
corMatrixSign <- corMatrix[corMatrix$p.value < 0.05,]
View(corMatrixSign)
corMatrixSign <- corMatrix[corMatrix$p.value < 0.05,]
corMatrixSign <- corMatrix[corMatrix$p.adjust < 0.05,]
corMatrixSign <- corMatrix[corMatrix$p.value < 0.05,]
View(corMatrix)
?GET()
miRNA_link <- sprintf('by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]', name, minSources, name)
name = "hsa-mir-212"
minSources = 3
miRNA_link <- sprintf('by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]', name, minSources, name)
miRNA_link
link_temaplate <- prefix + "https:.../KBOS/%s/%s/%s/DailyHistory.html"
prefix <- "https://app1.bioinformatics.mdanderson.org/tarhub/_design/basic/_view/"
link_temaplate <- prefix + "https:.../KBOS/%s/%s/%s/DailyHistory.html"
link_temaplate <- paste(prefix, "https:.../KBOS/%s/%s/%s/DailyHistory.html")
link_temaplate
prefix <- "https://app1.bioinformatics.mdanderson.org/tarhub/_design/basic/_view/"
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]')
link_temaplate
name = "hsa-mir-212"
minSources = 3
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA_link
targets <- GET(url = miRNA_link)
targets <- httr::GET(url = miRNA_link)
View(targets)
targets$content
targets$status_code
targets$headers
targets$cookies
targets$request
targets$output
targets$handle
targets$url
link_temaplate
miRNA_link
prefix <- "https://app1.bioinformatics.mdanderson.org/tarhub/_design/basic/_view/"
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]')
link_temaplate
?paste
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]', sep = "")
link_temaplate
test <- 'by_miRNAIDcount?startkey=["%s",:s]&endkey=["%s",{}]'
test
test <- 'by_miRNAIDcount?startkey=["\%s",\%s]&endkey=["\%s",{}]'
test <- 'by_miRNAIDcount?startkey=["/%s",\%s]&endkey=["\%s",{}]'
test <- 'by_miRNAIDcount?startkey=["/%s",%s]&endkey=["\\%s",{}]'
test
test <- 'by_miRNAIDcount?startkey=["%s",%s]&endkey=["%s",{}]'
test
test <- 'by_miRNAIDcount?startkey=[\"%s",%s]&endkey=["%s",{}]'
test
name = '"hsa-mir-212"'
name
name = '"hsa-mir-212"'
name
name = '\"hsa-mir-212\"'
name
?shQuote
name = sshQuote("hsa-mir-212")
name = shQuote("hsa-mir-212")
name
name = "\hsa-mir-212\""
name = "\"hsa-mir-212\""
name
name = shQuote("hsa-mir-212")
name
name = shQuote('\"hsa-mir-212\"')
name
name = shQuote("\"hsa-mir-212\"")
name
name = shQuote("\""hsa-mir-212"\"")
name = shQuote("\hsa-mir-212"\)
name = shQuote("\hsa-mir-212\")
minSources = 3
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
targets <- httr::GET(url = miRNA_link)
}
name = shQuote("\hsa-mir-212")
name = quote("  \"hey\"  ")
name
name = quote("\"hey\"")
name
name = "\"hey\""
name = "\"hey\""
name
name = "what the actual \"hey\"fock"
name
cat(name)
name = "\hsa-mir-212\"")
name = cat("\hsa-mir-212\"")
name = cat("\"hsa-mir-212\"")
name
name = cat("\"hsa-mir-212\"")
name
name = "\"hsa-mir-212\""
name
cat(name)
name <- cat(name)
name
name = "\"hsa-mir-212\"" # Use cat() to load with proper quatation marks
dQuote("hey")
dQuote(hey)
dQuote('hey')
View(corMatrix)
dQuote('hey')
miRNA_link <- sprintf(link_temaplate, cat(name), minSources, cat(name))
miRNA_link
name = "hsa-mir-212" # Use cat() to load with proper quatation marks
name
cat(name)
dquote(name)
dQuote(name)
name = dQuote("hsa-mir-212") # Use cat() to load with proper quatation marks
name
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA_link
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=[%s,%s]&endkey=[%s,{}]')
prefix <- "https://app1.bioinformatics.mdanderson.org/tarhub/_design/basic/_view/"
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA)_l
miRNA_link
targets <- httr::GET(url = miRNA_link)
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=[%s,%s]&endkey=[%s,{}]'  sep = "")
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=[%s,%s]&endkey=[%s,{}]',  sep = "")
targets <- httr::GET(url = miRNA_link)
miRNA_link
prefix <- "https://app1.bioinformatics.mdanderson.org/tarhub/_design/basic/_view/"
link_temaplate <- paste(prefix, 'by_miRNAIDcount?startkey=[%s,%s]&endkey=[%s,{}]',  sep = "")
link_temaplate
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA_link
targets <- httr::GET(url = miRNA_link)
name <- "%22hsa-mir-212%22"
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA_link
targets <- httr::GET(url = miRNA_link)
View(targets)
targets$cookies
targets$content
targets$request
targets$rows
targets$all_headers
targets$id
?httr::GET
targets <- httr::GET(url = miRNA_link, accept_json())
content(targets, type="application/json")
library("jsonlite")
fromJSON(miRNA_link)
targets <- fromJSON(url = miRNA_link)
targets <- fromJSON(miRNA_link)
View(targets)
targets$rows
targets$rows$id
nrow(mrna)
mirna_targets <- matrix(nrow = nrow(mirna), ncol = 1)
mirna[1,1]
head(mirna)
mirna[1,0]
row.names(mirna)[1]
i =2
name = dQuote(row.names(mirna)[i])
name
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
mirna_targets[i] <- fromJSON(miRNA_link)
miRNA_link
name
name = paste("%22", row.names(mirna)[i], "%22", sep = "")
name
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
mirna_targets[i] <- fromJSON(miRNA_link)
miRNA_link
fromJSON(miRNA_link)
target = fromJSON(miRNA_link)
target
View(target)
target$rows
?fromJSON
miRNA_link
row.names(mirna)[1]
name = tolower(paste("%22", row.names(mirna)[i], "%22", sep = ""))
name
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
mirna_targets[i] <- fromJSON(miRNA_link)
miRNA_link
i
i=1
name = tolower(paste("%22", row.names(mirna)[i], "%22", sep = ""))
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
mirna_targets[i] <- fromJSON(miRNA_link)
fromJSON(miRNA_link)
i=2
name = tolower(paste("%22", row.names(mirna)[i], "%22", sep = ""))
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
fromJSON(miRNA_link)
name
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("miRNAmeConverter")
?miRNAmeConverter
??miRNAmeConverter
currentVersion()
miRNAmeConverter::currentVersion()
miRNAmeConverter::currentVersion(row.names(mirna))
row.names(mirna)
MiRNANameConverter(row.names(mirna))
miRNAmeConverter::MiRNANameConverter(row.names(mirna))
miRNAmeConverter::MiRNANameConverter()
vignette(miRNAmeConverter)
# Translate a mature miRNA name to miRBase version 21.
nc = MiRNANameConverter() # Objectnstantiation
library(miRNAmeConverter)
# Translate a mature miRNA name to miRBase version 21.
nc = MiRNANameConverter() # Objectnstantiation
translateMiRNAName(nc, "hsa-miR-29a", version = 21.0)
nc
translateMiRNAName(nc, "hsa-miR-29a", version = 21.0)$v21.0
translateMiRNAName(nc, "hsa-miR-29a", version = 21.0)$input
translateMiRNAName(nc, "hsa-miR-29a", version = 21)$input
translateMiRNAName(nc, "hsa-miR-29a", version = 21)$v21
row.names(mirna)[2]
translateMiRNAName(nc, row.names(mirna)[2], version = 21)$v21
nc
translateMiRNAName(nc, row.names(mirna)[2], version = 21)$v21
translateMiRNAName(nc, row.names(mirna)[2], version = 22)$v22
translateMiRNAName(nc, "hsa-miR-29a", version = 22)$v22
?translateMiRNAName
res = translateMiRNAName(nc, miRNAs = c("hsa-miR-140", "hsa-miR-125a"),
versions = c(15, 16, 20, 21))
res
link_temaplate <- paste(prefix, 'by_matureMIRcount?startkey=[%s,%s]&endkey=[%s,{}]',  sep = "")
row.names(mirna)[2]
name = tolower(paste("%22", row.names(mirna)[i], "%22", sep = ""))
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
miRNA_link
name
translateMiRNAName(nc, "hsa-mir-3651", version = 21.0)
translateMiRNAName(nc, "hsa-miR-29a", version = 21.0)
name <- "%22hsa-mir-29a%22"
miRNA_link <- sprintf(link_temaplate, name, minSources, name)
mimiRmiRNA_link
miRmiRNA_link
miRNA_link
miRNA_names_v21 <- translateMiRNAName(nc, row.names(mirna), version = 21.0)
currentVersion(nc) <- 19
currentVersion()
BiocManager::install("miRBaseConverter")
library(miRBaseConverter)
?miRBaseConverter
??miRBaseConverter
row.names(mirna)
#==== Better package ===#
version=checkMiRNAVersion(row.names(mirna), verbose = TRUE)
source('C:/Users/jipde/OneDrive/school/1. Master/Project_01/Code/Github/Code/Expression_Analysis.R')
