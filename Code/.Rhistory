case <- pheno.mrna[,'Subtype'] == "cholestatic"
pheno.mrna[case,3] <- 'case'
# Set drained
case <- pheno.mrna[,'Subtype'] == "drained"
pheno.mrna[case,3] <- 'case'
# set controls
case <- pheno.mrna[,'Subtype'] == "control"
pheno.mrna[case,3] <- 'control'
# Order cases and controls
pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
# Set pheno.mirna which is identical to pheno.mrna
pheno.mirna = pheno.mrna
#=============================#
# Summarised experiment class #
#=============================#
# Set rownames for mrna
rownames(mrna) <- mrna[,1]
mrna <- mrna[,2:29]
# Set rownames for mirna
rownames(mirna) <- mirna[,1]
mirna <- mirna[,2:29]
# First we change the dataframes into matrices as the miRrna package works with matrices.
pheno.mrna <- as.matrix(pheno.mrna)
pheno.mirna <- as.matrix(pheno.mirna)
mrna = data.matrix(mrna)
mirna = data.matrix(mirna)
# Fill NA's with mean for the time-being
mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
# Remove drained cases from mrna
index = rep(TRUE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mrna <- mrna[,index]
# Remove drained cases from mirna
index = rep(TRUE, length(colnames(mirna)))
for(i in 1:length(colnames(mirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mirna <- mirna[,index]
# Remove drained cases from the phenotype data
pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
# Set first column of phenotype data as rowname
rownames(pheno.mrna) <- pheno.mrna[,1]
pheno.mrna <- pheno.mrna[,2:3]
pheno.mirna <- pheno.mrna # pheno.mirna is identical to pheno.mrna (for clarity they both exist)
hjbjh
kjfdsjafnds
clc
clear
clear
clearPushBack()
source('C:/Users/jipde/OneDrive/school/1. Master/Project_01/Code/Github/Code/Expression_Analysis.R')
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))                    # Set working directory
source("package_Manager.R")                     # Intall and load packages
source("dataFormatting.R")                      # Load and format the data
source("Expression_Analysis.R")                 # Load functions for the DE analysis
source("PCA.R")                                 # Load functions for Principal Component analysis
source("miRNA_Target_Analysis.R")               # Load functions to miRNA target prediction
source("interaction_network.R")                 # Load functions for network visualisation
source("Gene_ontology.R")                       # Load functions for Gene Ontology
source("Plots.R")                               # Load functions for plotting
source("Demographic_Analysis.R")
dir.create("../Figures", showWarnings = F)      # Initialise folder for figures
mRNA.DVC <- mRNA_DVC(save = TRUE)
#== Calcualte DEGs for Cholestatic V Control (CHVC) ==#
mRNA.CHVC <- mRNA_CHVC(save = TRUE)
#= Calcualte DEGs for Cholestatic V Drain (CHVD) =#
mRNA.CHVD <- mRNA_CHVD(save = TRUE)
#===========================================================#
##        2.1 ~ Run Gene Ontology analysis on mRNAs        ##
#===========================================================#
#= perform GO analysis - Biological Process =#
GO.mRNA.CHVC.BP <- get_GO(mRNA.CHVC,
1,
FALSE,
"mRNA_CHVC",
"mRNA: Cholestatic V Control (CHVC) \n Enriched Biological Processes",
Onto = "BP",
save = TRUE,
"GO_mRNA_CHVC_BP.pdf",
"Biological Processes")
#= perform GO analysis - Molecular Function =#
GO.mRNA.CHVC.MF <- get_GO(mRNA.CHVC,
1,
FALSE,
"mRNA_CHVC",
"mRNA: Cholestatic V Control (CHVC) \n Enriched Molecular Functions",
Onto = "MF",
save = TRUE,
"GO_mRNA_CHVC_MF.pdf",
"Molecular Functions")
#= perform GO analysis - Cellular Components =#
GO.mRNA.CHVC.CC <- get_GO(mRNA.CHVC,
1,
FALSE,
"mRNA_CHVC",
"mRNA: Cholestatic V Control (CHVC) \n Enriched Cellular Components",
Onto = "CC",
save = TRUE,
"GO_mRNA_CHVC_CC.pdf",
"Cellular Components")
#===========================================================#
##             2.2 ~ Generate heatmaps of DE mRNA          ##
#===========================================================#
#= Generate Heatmap for DEGs of Cholestatic vs Control =#
heatmap(mrna, mRNA.CHVC[[1]],
labels,
"mRNA heatmap (CHVC)",
save = TRUE,
"../Figures/Heatmap_mRNA_CHVC.pdf")
#= Generate Heatmap for DEGs of Cholestatic vs Drained =#
heatmap(mrna,
mRNA.CHVD[[1]],
labels,
"mRNA heatmap (CHVD)",
save = TRUE,
"../Figures/Heatmap_mRNA_CHVD.pdf")
#=============================================================================#
#=====                     3 ~ miRNA ANALYSIS                            =====#
#=============================================================================#
#===========================================================#
##       3.0 ~ Find differentially exprressed miRNAs       ##
#===========================================================#
#= Drain V Control (DVC) =#
miRNA.DVC <- miRNA_DVC(save = TRUE)
#=== Cholestatic V Control (CHVC) ===#
miRNA.CHVC <- miRNA_CHVC(save = TRUE)
#=== Cholestatic V Drain (CHVD) ===#
miRNA.CHVD <- miRNA_CHVD(save = TRUE)
#===========================================================#
##         3.1 ~ Query miRNA targets with multiMiR         ##
#===========================================================#
#= query targets for DE miRNAs of Cholestatic vs. Control =#
mirna.CHVC.targets <- miRNA.targets(mRNA.CHVC[[1]], miRNA.CHVC[[1]], removeDuplicates = FALSE)
#= query targets for DE miRNAs of Cholestatic vs. Drained =#
mirna.CHVD.targets <- miRNA.targets(mRNA.CHVD[[1]], miRNA.CHVD[[1]])
#===========================================================#
##   3.2 ~ miRNA targets similarity dendrogram generation  ##
#===========================================================#
#= miRNA dendrogram - Cholestatic vs. Control =#
dendrogram(miRNA.CHVC[[1]], mirna.CHVC.targets, TRUE, "../Figures/Dendrogram_CHVC.pdf")
#= miRNA dendrogram - Cholestatic vs. Drained =#
dendrogram(miRNA.CHVD[[1]], mirna.CHVD.targets, TRUE, "../Figures/Dendrogram_CHVD.pdf")
#===========================================================#
##       3.3 ~ Run Gene Ontology analysis on miRNAs        ##
#===========================================================#
#= perform GO analysis - Biological Process =#
GO.miRNA.CHVC.BP <- get_GO(miRNA.CHVC[[1]],
mirna.CHVC.targets,
use_target = TRUE,
"miRNA_CHVC",
"miRNA: Cholestatic V Control (CHVC) \n Enriched Biological Processes",
Onto = "BP",
save = TRUE,
"GO_miRNA_CHVC_BP.pdf",
"Biological Processes"
)
#= perform GO analysis - Molecular Function =#
GO.miRNA.CHVC.MF <- get_GO(miRNA.CHVC[[1]],
mirna.CHVC.targets,
TRUE,
"miRNA_CHVC",
"miRNA: Cholestatic V Control (CHVC) \n Enriched Molecular Functions",
Onto = "MF",
save = TRUE,
"GO_miRNA_CHVC_MF.pdf",
"Molecular Functions"
)
#= perform GO analysis - Cellular Component =#
GO.miRNA.CHVC.CC <- get_GO(miRNA.CHVC[[1]],
mirna.CHVC.targets,
TRUE,
"miRNA_CHVC",
"miRNA: Cholestatic V Control (CHVC) \n Enriched Cellular Components",
Onto = "CC",
save = TRUE,
"GO_miRNA_CHVC_CC.pdf",
"Cellular Components"
)
#=============================================================================#
#=====               4 ~ ADDITIONAL PLOTS AND ANALYSIS                   =====#
#=============================================================================#
#===========================================================#
##           4.0 ~ Principal Component Analysis            ##
#===========================================================#
#= perform PCA on mRNA data =#
PCA.mrna("PCA_mRNA_treatment.pdf", save = TRUE)
PCA.mrnaCorrected("PCA_mRNA_Corrected.pdf", save = TRUE)
#= perform PCA on miRNA data =#
PCA.mirna("PCA_miRNA.pdf", save = TRUE)
PCA.mirnaCorrected("PCA_miRNA_Corrected.pdf", save = TRUE)
#===========================================================#
##                  4.1 ~ Create boxplots                  ##
#===========================================================#
#= Box Plots of mRNA =#
mrna.boxPlot(save = TRUE, "../Figures/Boxplot_mRNA.pdf")
#= Box Plots of miRNA =#
mirna.boxPlot(save = TRUE, "../Figures/Boxplot_miRNA.pdf")
#===========================================================#
##              4.2 ~ Run Analysis of Variance             ##
#===========================================================#
#= ANOVA on mRNA =#
mRNA_Anova <- mrna.Anova()
#= ANOVA on miRNA =#
miRNA_Anova <- mirna.Anova()
mRNA_Anova
miRNA_Anova
write.csv()
miRNA_Anova[,!1]
miRNA_Anova[,2:ncol(miRNA_Anova)]
ncol(miRNA_Anova)
miRNA_Anova[,2:5]
miRNA_Anova[,2:4]
miRNA_Anova[1,1]
miRNA_Anova
as.matrix(miRNA_Anova)
as.matrix(miRNA_Anova[[1]])
as.matrix(miRNA_Anova[[1]])[,2:%]
as.matrix(miRNA_Anova[[1]])[,2:5]
as.matrix(miRNA_Anova[[1]])[,2:4]
mirna_anova <- as.matrix(miRNA_Anova[[1]])[,2:4]
colnames(mirna_Anova)[2]
colnames(mirna_anova)[2]
View(mirna_anova)
mirna_anova <- as.matrix(miRNA_Anova[[1]])
miRNA_Anova[[1]]
#= ANOVA on miRNA =#
miRNA_Anova <- mirna.Anova()
miRNA_Anova
write.csv(miRNA.Anova[[1]], "2.1.1 2.1.1.	miRNA between batch variability.csv")
#= ANOVA on miRNA =#
miRNA_Anova <- mirna.Anova()
write.csv(miRNA_Anova[[1]], "2.1.1 2.1.1.	miRNA between batch variability.csv")
?write.csv
write.csv(as.matrix(miRNA_Anova[[1]]), "2.1.1. miRNA between batch variability.csv")
#===========================================================#
##              4.2 ~ Run Analysis of Variance             ##
#===========================================================#
#= ANOVA on mRNA =#
mRNA_Anova <- mrna.Anova()
write.csv(as.matrix(mRNA_Anova[[1]]), "2.1.2. mRNA between batch variability.csv")
mrna.batches
mrna.treatmentOrder
mrna.means[,1]
mrna.batches[,1]
mrna.treatmntorder[,1]
mrna.treatmentorder[,1]
mrna.treatmentOrder[,1]
mrna.treatmentOrder[,2]
mrna.treatmentOrder[,3]
mrna.treatmentOrder[,2]
mrna.means <- data.frame(means= rowMeans(t(mrna),na.rm = TRUE))
mrna.means
mrna.Anova <- aov(mrna.means[,1]~mrna.treatmentOrder[,2])
mrna.Tukey <- TukeyHSD(mrna.Anova, ordered = FALSE, conf.level = 0.95)
mrna.Tukey
mrna.means <- data.frame(means= rowMeans(t(mrna),na.rm = TRUE))
mrna.Anova <- aov(mrna.means[,1]~mrna.batches[,1])
mrna.Tukey <- TukeyHSD(mrna.Anova, ordered = FALSE, conf.level = 0.95)
mrna.Tukey
mrna.means <- data.frame(means= rowMeans(t(mrna),na.rm = TRUE))
mrna.Anova <- aov(mrna.means[,1]~mrna.treatmentOrder[,2])
mrna.Tukey <- TukeyHSD(mrna.Anova, ordered = FALSE, conf.level = 0.95)
mirna.means <- data.frame(means = rowMeans(t(mirna),na.rm = TRUE))
mirna.Anova <- aov(mirna.means[,1]~mirna.batches[,1])
mirna.Tukey <- TukeyHSD(mirna.Anova, ordered = FALSE, conf.level = 0.95)
mirna.Tukey
mirna.treatmentOrder[,2]
mirna.means <- data.frame(means = rowMeans(t(mirna),na.rm = TRUE))
mirna.Anova <- aov(mirna.means[,1]~mirna.treatmentOrder[,2])
mirna.Tukey <- TukeyHSD(mirna.Anova, ordered = FALSE, conf.level = 0.95)
mirna.Tukey
mrna.means <- data.frame(means= rowMeans(t(mrna),na.rm = TRUE))
mrna.Anova <- aov(mrna.means[,1]~mrna.treatmentOrder[,2])
mrna.Tukey <- TukeyHSD(mrna.Anova, ordered = FALSE, conf.level = 0.95)
mrna.Tukey
mmiRNA.CHVC
miRNA.CHVC
#=== Cholestatic V Control (CHVC) ===#
miRNA.CHVC <- miRNA_CHVC(save = TRUE)
miRNA.CHVC
miRNA.CHVC[[1]]
write.csv(miRNA.CHVC[[1]], "2.2.2.	Differentially expressed miRNAs.csv")
write.csv(miRNA.CHVC[[1]], "2.2.2. Differentially expressed miRNAs.csv")
write.csv(mRNA.CHVC[[1]], "2.2.1. Differentially expressed mRNAs.csv")
source("miRNA_Target_Analysis.R")
#=== multiMiR and correlation filter network ===#
#= Compute the miRNA-mRNA correlations  =#
corMatrix <- miRNA_correlate(mirna, mrna,
only_DEG = TRUE,
miRNA_DEG = miRNA.CHVC[[2]],
mRNA_DEG = mRNA.CHVC[[2]],
mrna.treatmentOrder = mrna.treatmentOrder)
corMatrix
source("miRNA_Target_Analysis.R")
#=== multiMiR and correlation filter network ===#
#= Compute the miRNA-mRNA correlations  =#
corMatrix <- miRNA_correlate(mirna, mrna,
only_DEG = TRUE,
miRNA_DEG = miRNA.CHVC[[2]],
mRNA_DEG = mRNA.CHVC[[2]],
mrna.treatmentOrder = mrna.treatmentOrder)
corMatrix
sort(corMatrix$`p-adjust`)
corMatrix[sort(corMatrix$`p-adjust`),]
View(corMatrix)
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
target_overlap_network[[1]]
head(target_overlap_network[[1]])
head(target_overlap_network[[2]])
head(correlation_data)
head(target_overlap_network[[2]])
View(target_overlap_network)
x <- target_overlap_network[[2]]
View(x)
View(corMatrix)
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
View(correlation_data)
View(correlation_data)
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
target_overlap_network
View(target_overlap_network)
View(x)
corMatrix[,c("mRNA", "miRNA")]
corMatrix_Spearman <- corMatrix
source("miRNA_")
source("miRNA_Target_Analysis.R")
#=== multiMiR and correlation filter network ===#
#= Compute the miRNA-mRNA correlations  =#
corMatrix <- miRNA_correlate(mirna, mrna,
only_DEG = TRUE,
miRNA_DEG = miRNA.CHVC[[2]],
mRNA_DEG = mRNA.CHVC[[2]],
mrna.treatmentOrder = mrna.treatmentOrder)
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
target_overlap_network[[2]]
y <- matrix(nrow = 4, ncol = 3)
y$new = 1
y[,"new"] = 1
y[,"new"] <- 1
y[,"new"] <- list1
y[,"new"] <- list(10)
y
y <- matrix(nrow = 4, ncol = 3)
y
y$new <- c(1,1,1,1)
y
y <- matrix(nrow = 4, ncol = 3)
y[,new] <- c(1,1,1,1)
y
y$'new' <- c(1,1,1,1)
y
source("interaction_network.R")
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
source("interaction_network.R")
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
source("interaction_network.R")
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
data <- correlation_data
contains_genes = TRUE
group1 = "mRNA"
group2 = "miRNA"
# Create Source ID's
if (contains_genes == TRUE){
names <- unique(data[,1])
source_ID <- matrix(ncol = 5, nrow = length(names))   # Initialise ID matrix
source_ID[,2] <- as.character(names)                  # Get all unqiue source names
source_ID[,1] <- seq(0,length(names) - 1)             # Create the ID's
source_ID[,3] <- group1                               # Set group to Source
colnames(source_ID) <- c("ID", "name", "Group", "Symbol", "Genename")   # Create column names
} else {
names <- unique(data[,1])
source_ID <- matrix(ncol = 3, nrow = length(names))   # Initialise ID matrix
source_ID[,2] <- as.character(names)                  # Get all unqiue source names
source_ID[,1] <- seq(0,length(names) - 1)             # Create the ID's
source_ID[,3] <- group1                               # Set group to Source
colnames(source_ID) <- c("ID", "name", "Group")       # Create column names
}
View(correlation_data)
# Create Target ID's
names <- unique(data[,2])
target_ID <- matrix(ncol = 3, nrow = length(names))                         # Initialise ID matrix
target_ID[,2] <- as.character(names)                                        # Get all unqiue source names
target_ID[,1] <- seq(nrow(source_ID), nrow(source_ID) + length(names) - 1)  # Create the ID's
target_ID[,3] <- group2                                                     # Set group to Target
colnames(target_ID) <- c("ID", "name", "Group")                             # Create column names
View(correlation_data)
View(correlation_data)
View(target_ID)
entrez_ID <- source_ID[,"name"]
cols <- c("SYMBOL", "GENENAME", "SYMBOL")
name_mapping <- select(org.Hs.eg.db,
keys = source_ID[,"name"],
columns=cols, keytype="ENTREZID")
source_ID[,4] <- name_mapping[,"SYMBOL"]
source_ID[,5] <- name_mapping[,"GENENAME"]
View(target_overlap_network)
View(source_ID)
# Combine source and target data
network_data <- merge(data, source_ID, by.x = 1, by.y = "name", sort = FALSE)         # Put source ID's in network_data
network_data <- merge(network_data, target_ID, by.x = 2, by.y = "name", sort = FALSE) # Put target ID's in network_data
View(network_data)
# Create link data for network
network_link <- network_data[,c("ID.x", "ID.y")]
colnames(network_link) <- c("Source", "Target")
network_node <- data.frame(do.call(rbind,
list(source_ID[,c("ID", "Symbol", "Group")],
target_ID)))            # Create node data by stacking the two ID matrices on top of eachother
View(network_node)
network_node <- data.frame(do.call(rbind,
list(source_ID[,c("ID", "Symbol", "Group", "name")],
target_ID)))            # Create node data by stacking the two ID matrices on top of eachother
target_ID
network_node[,4] <- NA
network_node[1:nrow(source_ID),4] <- source_ID[,"Genename"]
View(network_node)
network_node[,5] <- NA
network_node[1:nrow(source_ID),5] <- source_ID[,"name"]     # Add entrez gene IDs
View(network_node)
colnames(network_node) <- c("ID", "Name", "Group", "Genename", "EntrezID")  # Set correct column names
is.na(network_node$Name)
network_node[is.na(network_node$Name), "name"]
network_node[is.na(network_node$Name),]
network_node[is.na(network_node$Name), "Name"]
network_node[is.na(network_node$Name), "Name"] <- network_node[is.na(network_node$Name), "EntrezID"]  # Replace missing gene symbols with entrez IDs
network_node[is.na(network_node$Name), "EntrezID"]
network_node[is.na(network_node$Name), "Name"]
network_node[is.na(network_node$Name), "Name"] <- network_node[is.na(network_node$Name), "EntrezID"]  # Replace missing gene symbols with entrez IDs
network_node[is.na(network_node$Name), "Name"] <- as.factor(network_node[is.na(network_node$Name), "EntrezID"])  # Replace missing gene symbols with entrez IDs
network_node[is.na(network_node$Name), "Name"] <- 99999
as.character(network_node[is.na(, "Name"])
as.character(network_node[,"Name"]
)
network_node[,"Name"] <- as.character(network_node[,"Name"]) # Convert gene symbols to characters instead of factors
network_node[is.na(network_node$Name), "Name"] <- network_node[is.na(network_node$Name), "EntrezID"]  # Replace missing gene symbols with entrez IDs
View(network_node)
source("interaction_network.R")
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
target_overlap_network[[2]]
x <- target_overlap_network[[2]]
View(x)
corMatrix <- corMatrix_Spearman
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
x <- target_overlap_network[[2]]
View(x)
write.csv(x, "2.3.2. Node overview - spearman correlation.csv")
#=== multiMiR and correlation filter network ===#
#= Compute the miRNA-mRNA correlations  =#
corMatrix <- miRNA_correlate(mirna, mrna,
only_DEG = TRUE,
miRNA_DEG = miRNA.CHVC[[2]],
mRNA_DEG = mRNA.CHVC[[2]],
mrna.treatmentOrder = mrna.treatmentOrder)
x[sort(x$nodeDegree),]
x2 <- x[sort(x$nodeDegree),]
View(x2)
View(x)
View(x2)
?Sort
#= load the miRNA-mRNA interactions based on the pearson correlations =#
correlation_data <- corMatrix[,c("mRNA", "miRNA", "p-value")]
#= Generate link and node data for the network visualisation =#
target_overlap_network <- generate_network_data(correlation_data,
contains_genes = TRUE)
y <- target_overlap_network[[2]]
View(y)
write.csv(y, "2.3.1. Node overview - pearson correlation.csv")
mirna.CHVC.targets.unique_overlap
correlation_data
target_overlap_network[[2]]
target_overlap_network[[1]]
