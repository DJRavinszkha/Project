?c()
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
library(pcaMethods)
library(limma)
boxplot()
gxData.raw
boxplot()
boxplot()
ls()
library(gtools)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
## STEP 1: Set working directory to MSB1005-WGCNA-2019 folder.
Change location to current file location
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
```
```{r}
library(rstudioapi)
install.packages(c("BiocManager", "igraph", "rstudioapi", "WGCNA"))
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
## STEP 2: Packages
Install the required packages if necessary
```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
install.packages("WGCNA")
install.packages("WGCNA")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
BiocManager::install("WGCNA")
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
#library(WGCNA
library(RCy3
library(igraph
library(WGCNA)
library(RCy3)
library(igraph)
options(stringsAsFactors = F)
geneExpressionData <- read.delim("Hypoxia-data-WGCNA.txt", as.is = T)
install.packages(c("fields", "impute", "dynamicTreeCut", "qvalue", "flashClust", "Hmisc") )
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
library(RCy3)
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
install.packages("WGCNA")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("anamiR")
library(anamiR)
library(rstudioapi)
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE) #Load miRNA expression data
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
# Create phenotype data
pheno <- labels
require(limma)
require(pcaMethods)
require(gplots)
require(ggplot2)
library(FactoMineR)
library(factoextra)
# MIRNA pca for 28 samples
mirna[is.na(mirna)] <- NA # change Nan for NA
pcaRes <- pca(t(mirna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mirna<- data.frame(c(pcaRes@scores[,1]),
pcaRes@scores[,2],
pcaRes@scores[,3],
pcaRes@scores[,4],
pcaRes@scores[,5],
treat=labels$V2)
colnames(PCA_28mirna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "treat")
ggplot(PCA_28mirna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mirna$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for 28 samples
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
treat=labels$V2)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for all microRNA (17581)
mrna[is.na(mrna)] <- NA # change Nan for NA
