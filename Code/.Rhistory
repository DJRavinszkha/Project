?c()
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
library(pcaMethods)
library(limma)
boxplot()
gxData.raw
boxplot()
boxplot()
ls()
library(gtools)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
## STEP 1: Set working directory to MSB1005-WGCNA-2019 folder.
Change location to current file location
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
```
```{r}
library(rstudioapi)
install.packages(c("BiocManager", "igraph", "rstudioapi", "WGCNA"))
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
## STEP 2: Packages
Install the required packages if necessary
```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
install.packages("WGCNA")
install.packages("WGCNA")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
BiocManager::install("WGCNA")
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
#library(WGCNA
library(RCy3
library(igraph
library(WGCNA)
library(RCy3)
library(igraph)
options(stringsAsFactors = F)
geneExpressionData <- read.delim("Hypoxia-data-WGCNA.txt", as.is = T)
install.packages(c("fields", "impute", "dynamicTreeCut", "qvalue", "flashClust", "Hmisc") )
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
library(RCy3)
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
install.packages("WGCNA")
library(qvalue)
library(limma)
library(multiMiR)
library(Rgraphviz)
library(topGO)
library(edgeR)
library(org.Hs.eg.db)
library(ggplot2)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
mRNA.CHVD <- mRNA.CHVD()
miRNA.DVC <- miRNA.DVC()
miRNA.CHVC <- miRNA.CHVC()
miRNA.CHVD <- miRNA.CHVD()
GO <- function(p, #mrna.DEG.CHVC$adj.P
names){
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
return(GO)
}
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(results.ks)
}
#=========================================#
##                mRNA                   ##
#=========================================#
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC[[1]]$adj.p, mRNA.CHVC[[2]]) ## Error becauae havent initialised namesTop
result.ks.CHVC<-plotGO(GO.mrna.CHVC,
20,
"mRNA1: GO enrichment Cholestatic vs Control")
# showSigOfNodes(GOdata_CHvC, score(results.ks), firstSigNodes = 8, useInfo = 'def')
printGraph(GO.mrna.CHVC, result.ks.CHVC, firstSigNodes = 20, fn.prefix = "tGO", useInfo = "all", pdfSW = TRUE)
showSigOfNodes(GOdata_CHvC, score(results.ks), firstSigNodes = 8, useInfo = 'def')
showSigOfNodes(GOdata_CHvC, score(results.ks), firstSigNodes = 8, useInfo = 'def')
printGraph(GO.mrna.CHVC, result.ks.CHVC, firstSigNodes = 20, fn.prefix = "tGO", useInfo = "all", pdfSW = TRUE)
ann.genes <- genesInTerm(GO.mrna.CHVC) ## get the annotations
View(ann.genes)
sel.terms <- sample(usedGO(GO.mrna.CHVC),1815)
ann.genes <- genesInTerm(GO.mrna.CHVC, usedGO(GO.mrna.CHVC)) ## get the annotations
View(ann.genes)
ann.genes
View(ann.genes)
