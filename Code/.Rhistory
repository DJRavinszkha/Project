data_long<-melt(adj.mat.GO_CHVC) # change data to format long
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","variable"))
data.long_CHVC_enrich<- merge(data.long_CHVC,enrichment.CHVC,by="GO.id")
View(enrichment.CHVC)
data.long_CHVC_enrich<- match(enrichment.CHVC,data.long_CHVC,)
# Matrix for igraph
adj.mat.GO_CHVC<-adj.mat(GO.mrna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.GO_CHVC) # change data to format long
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","variable"))
# Matrix for igraph
adj.mat.GO_CHVC<-adj.mat(GO.mrna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.GO_CHVC) # change data to format long
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","GO.id"))
View(data.long_CHVC)
View(adj.mat.GO_CHVC)
View(data_long)
rownames(data_long)<- c("ids","GO.id","values")
colnames(data_long)<- c("ids","GO.id","values")
View(data_long)
# Matrix for igraph
adj.mat.GO_CHVC<-adj.mat(GO.mrna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","GO.id"))
data.long_CHVC_enrich<- match(enrichment.CHVC$GO.id,data.long_CHVC$variable)
data.long_CHVC_enrich
data.long_CHVC_enrich<- merge(enrichment.CHVC$GO.id,data.long_CHVC$variable)
data.long_CHVC_enrich<- merge(enrichment.CHVC,data.long_CHVC,by="GO.id")
View(data.long_CHVC_enrich)
# Matrix for igraph
adj.mat.GO_CHVC<-adj.mat(GO.mrna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","GO.id"))
View(data.long_CHVC)
data.long_CHVC_enrich<- merge(data.long_CHVC, enrichment.CHVC,by="GO.id")
data.long_CHVC_enrich<- match(data.long_CHVC$GO.id, enrichment.CHVC$GO.id)
data.long_CHVC_enrich<- match( enrichment.CHVC$GO.id,data.long_CHVC$GO.id,)
enrichment.CHVC$GO.id
data.long_CHVC$GO.id
data.long_CHVC_enrich<- which(enrichment.CHVC$GO.id==data.long_CHVC$GO.id)
data.long_CHVC_enrich<- which(enrichment.CHVC$GO.id %in% data.long_CHVC$GO.id)
data.long_CHVC_enrich<- which(data.long_CHVC$GO.id %in% enrichment.CHVC$GO.id)
View(data.long_CHVC)
View(enrichment)
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS")
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS")
enrichment<- data.frame(GO.id=goEnrichment$GO.ID,BP=goEnrichment$Term)
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(list(results.ks, enrichment))
}
result.ks.CHVC<-plotGO(GO.mrna.CHVC,
20,
"mRNA1: GO enrichment Cholestatic vs Control")
enrichment.CHVC<- result.ks.CHVC[[2]]
View(enrichment.CHVC)
GO.mirna.CHVC@ontology
GO.mirna.CHVC@phenotype
GO.mirna.CHVC@graph
GO.mirna.CHVC@allScores
?GenTable
GO.mirna.CHVC
View(GO.mirna.CHVD)
GO.mirna.CHVC@graph
length(GO.mirna.CHVC@graph)
View(goEnrichment)
V(GO.mirna.CHVC@graph)
GO.mirna.CHVC@allGenes
GO.mirna.CHVC@allScores
GO.mirna.CHVC@nodeSize
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS")
results.ks <- runTest(GO.mrna.CHVC, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO.mrna.CHVC, KS = results.ks, orderBy = "KS")
View(goEnrichment)
View(result.ks.CHVD)
results.ks@geneData
results.ks@testName
results.ks@score
length(results.ks@geneData)
nrow(results.ks@geneData)
ncol(results.ks@geneData)
a<- results.ks@score
length(a)
length(results.ks@score)
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS",topNodes = length(results.ks@score))
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS",topNodes = length(results.ks@score))
enrichment<- data.frame(GO.id=goEnrichment$GO.ID,BP=goEnrichment$Term)
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(list(results.ks, enrichment))
}
adj.mat <-function(GO, DEG, type){
ann.genes <- genesInTerm(GO, usedGO(GO)) ## get the annotations
data<- DEG[[1]]$mRNA
# Initialize adj matrix
adj.matrix<- data.frame(matrix(0, nrow = length(data), ncol = length(usedGO(GO.mrna.CHVC))))
colnames(adj.matrix)<- usedGO(GO)
rownames(adj.matrix)<- data
for (a in 1:length(usedGO(GO))){
genes<-ann.genes[[a]]
for (b in 1:length(genes)){
current<-genes[b]
adj.matrix[which(rownames(adj.matrix)== current),a]<- 1}
}
adj.matrix<- data.frame(ids=rownames(adj.matrix),adj.matrix) # Only for testing purposes
return(adj.matrix)
}
#=========================================#
##                mRNA                   ##
#=========================================#
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC[[1]]$adj.p, mRNA.CHVC[[2]]) ## Error becauae havent initialised namesTop
result.ks.CHVC<-plotGO(GO.mrna.CHVC,
20,
"mRNA1: GO enrichment Cholestatic vs Control")
enrichment.CHVC<- result.ks.CHVC[[2]]
View(enrichment.CHVC)
data.long_CHVC_enrich<- match(data.long_CHVC$GO.id,enrichment.CHVC$GO.id)
enrichment.CHVC$GO.id
data.long_CHVC$GO.id
goEnrichment <- GenTable(GO.mirna.CHVC, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- GenTable(GO.mrna.CHVC, KS = results.ks, orderBy = "KS", topNodes = 20)
View(goEnrichment)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
View(goEnrichment)
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
View(goEnrichment)
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
View(goEnrichment)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
View(goEnrichment)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
View(mirna.batches)
View(goEnrichment)
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
View(goEnrichment)
GO.mrna.CHVC
genesInTerm(GO, usedGO(GO)
genesInTerm(GO, usedGO(GO))
genesInTerm(GO, usedGO(GO.mrna.CHVC))
genesInTerm(GO.mrna.CHV, usedGO(GO.mrna.CHVC))
genesInTerm(GO.mrna.CHVC, usedGO(GO.mrna.CHVC))
View(adj.mat.GO_CHVC)
ann.genes[[1]]
ann.genes <- genesInTerm(GO.mirna.CHVC, usedGO(GO.mirna.CHVC))
View(ann.genes)
DEG[[1]]$mRNA
usedGO(GO)
usedGO(GO.mirna.CHVC)
colnames(adj.matrix)<- usedGO(GO)
View(adj.mat.GO_CHVC)
usedGO(GO.mirna.CHVC)
typeof(usedGO(GO.mirna.CHVC))
data.long_CHVC$GO.id
enrichment.CHVC$GO.id
enrichment.CHVC$GO.id<-gsub(":", ".", enrichment.CHVC$GO.id)
View(enrichment.CHVC)
enrichment.CHVC$GO.id<-gsub(":", ".", enrichment.CHVC$GO.id)
data.long_CHVC_enrich<- match(data.long_CHVC$GO.id,enrichment.CHVC$GO.id)
data.long_CHVC_enrich<- data.long_CHVC$GO.id[match(data.long_CHVC$GO.id,enrichment.CHVC$GO.id)]
data.long_CHVC_enrich<- match(enrichment.CHVC$GO.id,data.long_CHVC$GO.id)
data.long_CHVC_enrich<- match(data.long_CHVC$GO.id,enrichment.CHVC$GO.id)
head(data.long_CHVC_enrich)
data.long_CHVC_enrich<- merge(data.long_CHVC,enrichment.CHVC, by="GO.id")
View(enrichment)
head(data.long_CHVC_enrich)
View(data.long_CHVC_enrich)
View(enrichment.CHVC)
View(enrichment.CHVC)
data.long_CHVC_enrich
View(data.long_CHVC_enrich)
View(data.long_CHVC_enrich)
#GO enrichment for the mRNA targets
GO.mirna.CHVC <- GO(uniqueMirna.targets.DEG.CHVC$adj.p, uniqueMirna.targets.DEG.CHVC$mRNA)
result.mirna.ks.CHVC <-plotGO(GO.mirna.CHVC,
20,
"Targets miRNA: GO enrichment Cholestatic vs Control")
enrichment.mirna.CHVC <- result.mirna.ks.CHVC[[2]]
# Adjacency matrix
adj.mat.mirna.GO_CHVC<-adj.mat(GO.mirna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.mirna.GO_CHVC) # change data to format long
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","variable"))
enrichment.mirna.CHVC$GO.id<-gsub(":", ".", enrichment.mirna.CHVC$GO.id)
data.long.mirna_CHVC_enrich<- merge(data.long.mirna_CHVC,enrichment.mirna.CHVC, by="GO.id")
data.long.mirna_CHVC
data_long <- melt(adj.mat.mirna.GO_CHVD) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long.mirna_CHVD <- data_long[data_long[,3] != 0,]
data.long.mirna_CHVD <- subset(data.long.mirna_CHVD, select=c("ids","variable"))
head(data.long.mirna_CHVD)
data.long.mirna_CHVD <- data_long[data_long[,3] != 0,]
head(data.long.mirna_CHVD)
data_long<-melt(adj.mat.mirna.GO_CHVC) # change data to format long
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","variable"))
enrichment.mirna.CHVC$GO.id<-gsub(":", ".", enrichment.mirna.CHVC$GO.id)
data.long.mirna_CHVC_enrich<- merge(data.long.mirna_CHVC,enrichment.mirna.CHVC, by="GO.id")
head(data.long.mirna_CHVC)
data_long<-melt(adj.mat.mirna.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","variable"))
data_long<-melt(adj.mat.mirna.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","variable"))
head(data.long.mirna_CHVC)
colnames(data_long)<- c("ids","GO.id","values")
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","GO.id"))
enrichment.mirna.CHVC$GO.id<-gsub(":", ".", enrichment.mirna.CHVC$GO.id)
data.long.mirna_CHVC_enrich<- merge(data.long.mirna_CHVC,enrichment.mirna.CHVC, by="GO.id")
data.long.mirna_CHVC_enrich
View(data.long.mirna_CHVC_enrich)
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO.mrna.CHVC, KS = results.ks, orderBy = "KS", topNodes = show)
enrichment<- data.frame(GO.id=goEnrichment$GO.ID, BP=goEnrichment$Term)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(list(results.ks, enrichment))
}
library(qvalue)
library(limma)
library(multiMiR)
library(Rgraphviz)
library(topGO)
library(edgeR)
library(org.Hs.eg.db)
library(ggplot2)
library(rstudioapi)
library(reshape2)
library(plyr)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
mRNA.CHVD <- mRNA.CHVD()
miRNA.DVC <- miRNA.DVC()
miRNA.CHVC <- miRNA.CHVC()
miRNA.CHVD <- miRNA.CHVD()
GO <- function(p, #mrna.DEG.CHVC$adj.P
names){
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
return(GO)
}
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO.mrna.CHVC, KS = results.ks, orderBy = "KS", topNodes = show)
enrichment<- data.frame(GO.id=goEnrichment$GO.ID, BP=goEnrichment$Term)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(list(results.ks, enrichment))
}
adj.mat <-function(GO, DEG, type){
ann.genes <- genesInTerm(GO, usedGO(GO)) ## get the annotations
data<- DEG[[1]]$mRNA
# Initialize adj matrix
adj.matrix<- data.frame(matrix(0, nrow = length(data), ncol = length(usedGO(GO.mrna.CHVC))))
colnames(adj.matrix)<- usedGO(GO)
rownames(adj.matrix)<- data
for (a in 1:length(usedGO(GO))){
genes<-ann.genes[[a]]
for (b in 1:length(genes)){
current<-genes[b]
adj.matrix[which(rownames(adj.matrix)== current),a]<- 1}
}
adj.matrix<- data.frame(ids=rownames(adj.matrix),adj.matrix) # Only for testing purposes
return(adj.matrix)
}
#=========================================#
##                mRNA                   ##
#=========================================#
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC[[1]]$adj.p, mRNA.CHVC[[2]]) ## Error becauae havent initialised namesTop
result.ks.CHVC<-plotGO(GO.mrna.CHVC,
20,
"mRNA1: GO enrichment Cholestatic vs Control")
enrichment.CHVC <- result.ks.CHVC[[2]]
#showSigOfNodes(GOdata_CHvC, score(results.ks), firstSigNodes = 8, useInfo = 'def') #View network in panel
printGraph(GO.mrna.CHVC, result.ks.CHVC[[1]], firstSigNodes = 20, fn.prefix = "tGO", useInfo = "all", pdfSW = TRUE) # Save network in pdf
# Matrix for igraph
adj.mat.GO_CHVC<-adj.mat(GO.mrna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long_CHVC<- data_long[data_long[,3] != 0,]
data.long_CHVC<- subset(data.long_CHVC,select=c("ids","GO.id"))
enrichment.CHVC$GO.id<-gsub(":", ".", enrichment.CHVC$GO.id)
data.long_CHVC_enrich<- merge(data.long_CHVC,enrichment.CHVC, by="GO.id")
View(data.long_CHVC_enrich)
##===== Cholestatic Vs Drained (CHVD) =====##
GO.mrna.CHVD <- GO(mRNA.CHVD[[1]]$adj.p, mRNA.CHVD[[2]])
result.ks.CHVD<-plotGO(GO.mrna.CHVD,
20,
"mRNA1: GO enrichment Cholestatic vs Drained")
printGraph(GO.mrna.CHVD, result.ks.CHVD, firstSigNodes = 20, fn.prefix = "tGO", useInfo = "all", pdfSW = TRUE) # Save network in pdf
adj.mat.GO_CHVD<-adj.mat(GO.mrna.CHVD,mRNA.CHVD)
data_long<-melt(adj.mat.GO_CHVD) # change data to format long
data.long_CHVD<- data_long[data_long[,3] != 0,]
data.long_CHVD<- subset(data.long_CHVD,select=c("ids","variable"))
printGraph(GO.mrna.CHVD, result.ks.CHVD[[1]], firstSigNodes = 20, fn.prefix = "tGO", useInfo = "all", pdfSW = TRUE) # Save network in pdf
data_long<-melt(adj.mat.GO_CHVD) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long_CHVD<- data_long[data_long[,3] != 0,]
data.long_CHVD<- subset(data.long_CHVD,select=c("ids","GO.id"))
enrichment.CHVD$GO.id<-gsub(":", ".", enrichment.CHVD$GO.id)
enrichment.CHVD <- result.ks.CHVD[[2]]
data_long<-melt(adj.mat.GO_CHVD) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long_CHVD<- data_long[data_long[,3] != 0,]
data.long_CHVD<- subset(data.long_CHVD,select=c("ids","GO.id"))
enrichment.CHVD$GO.id<-gsub(":", ".", enrichment.CHVD$GO.id)
data.long_CHVD_enrich<- merge(data.long_CHVD,enrichment.CHVD, by="GO.id")
View(data.long_CHVD_enrich)
#= Cholestatic V Control (CHVC) =#
# Get targets
mirna.targets.CHVC <- get_multimir(mirna = miRNA.CHVC[[1]]$mirna.Name, summary = TRUE)
targets.names.CHVC <- data.frame(mRNA = mirna.targets.CHVC@data$target_entrez,
mirna = mirna.targets.CHVC@data$mature_mirna_id,
source = mirna.targets.CHVC@data$pubmed_id)
# Find which targets are present on our mRNA list
mirna.targets.DEG.CHVC <- merge(mRNA.CHVC[[1]], targets.names.CHVC, by = "mRNA", sort = FALSE)
#Find unique targets (Avoid double testing)
uniqueMirna.targets.DEG.CHVC <- mirna.targets.DEG.CHVC[!duplicated(mirna.targets.DEG.CHVC$mRNA),]
#GO enrichment for the mRNA targets
GO.mirna.CHVC <- GO(uniqueMirna.targets.DEG.CHVC$adj.p, uniqueMirna.targets.DEG.CHVC$mRNA)
result.mirna.ks.CHVC <-plotGO(GO.mirna.CHVC,
20,
"Targets miRNA: GO enrichment Cholestatic vs Control")
enrichment.mirna.CHVC <- result.mirna.ks.CHVC[[2]]
# Adjacency matrix
adj.mat.mirna.GO_CHVC<-adj.mat(GO.mirna.CHVC,mRNA.CHVC)
data_long<-melt(adj.mat.mirna.GO_CHVC) # change data to format long
colnames(data_long)<- c("ids","GO.id","values")
data.long.mirna_CHVC<- data_long[data_long[,3] != 0,]
data.long.mirna_CHVC<- subset(data.long.mirna_CHVC, select=c("ids","GO.id"))
enrichment.mirna.CHVC$GO.id<-gsub(":", ".", enrichment.mirna.CHVC$GO.id)
data.long.mirna_CHVC_enrich<- merge(data.long.mirna_CHVC,enrichment.mirna.CHVC, by="GO.id")
View(data.long_CHVC_enrich)
View(data.long.mirna_CHVC_enrich)
View(data.long_CHVC_enrich)
View(data.long_CHVD_enrich)
?get_multimir
?annFUN.org
?get_multimir
GO.mrna.CHV
GO.mrna.CHVC
View(enrichment.CHVC)
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
source("dataFormatting.R")
source("Expression_Analysis.R")
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
mRNA.CHVD <- mRNA.CHVD()
View(mRNA.CHVC)
View(mRNA.CHVC[[1]])
mRNA.DVC <- mRNA.DVC()
source("Expression_Analysis.R")
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
mRNA.CHVD <- mRNA.CHVD()
View(data.long_CHVC_enrich)
View(data.long_CHVC_enrich)
View(data.long.mirna_CHVC)
View(data.long.mirna_CHVC_enrich)
