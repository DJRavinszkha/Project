View(miRNA.targets.CHVC.DEG)
View(miRNA.targets.CHVC)
View(miRNA.targets.CHVC.DEG)
miRNA.targets.CHVC.ALL <- miRNA.targets.CHVC@data
data <- miRNA.targets.CHVC.DEG@data                                                                 # load data
data <- data[!duplicated(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]  # Filter out duplicates
data <- data[data[,"target_entrez"] != "",] # Remove rows with missing entrez ID's
adj.matrix <- matrix(data = 0,
ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
for (i in 1:nrow(data)){
row <- data[i,"target_entrez"]
col <- data[i,"mature_mirna_id"]
adj.matrix[row, col] <- adj.matrix[row, col] + 1
}
#=== Create 3 columned matrix for network visualisation ===#
data[,"Occurance"] <- 1
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
network <- data.frame(network_data)
network <- data.frame(network_data)
networ_data
data
View(data)
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
network_data
network <- data.frame(network_data)
simpleNetwork(network)
View(network)
typof(target_entrez)
typof(data[1,2])
typeof(network[1,2])
network[1,2]
View(network)
forceNetwork(network)
?forceNetwork
data(MisLinks)
data(MisNodes)
MisLinks
head(MisLinks)
head(MisNodes)
forceNetwork(MisLinks, MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4, zoom = TRUE)
miRNA_ID <- unique(network_data[,"mature_mirna_id"])
miRNA_ID
seq(1,length(miRNA_ID))
# Convert into ID's and create node and link data for the network.
miRNA_ID[,2] <- seq(1,length(miRNA_ID))
miRNA_ID[,2] <- 1
miRNA_ID[[2]] <- 1
# Convert into ID's and create node and link data for the network.
miRNA_ID[[2]] <- seq(1,length(miRNA_ID))
seq(0,length(miRNA_ID)
)
length(seq(0,length(miRNA_ID))
)
length(seq(0,length(miRNA_ID)-1)
)
miRNA_ID
?data.frame
miRNA_ID <- data.frame()
miRNA_ID <- data.frame()
colnames(miRNA_ID) <- c("name", "ID")
miRNA_ID <- matrix(ncol = 2)
miRNA_ID <- matrix(ncol = 2)
miRNA_ID[,1] <- unique(network_data[,"mature_mirna_id"]) # Get all unqiue miRNA names
IDs <- unique(network_data[,"mature_mirna_id"])
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
miRNA_ID[,1] <- IDs # Get all unqiue miRNA names
# Convert into ID's and create node and link data for the network.
miRNA_ID[,2] <- seq(0,length(miRNA_ID)-1)
length(miRNA_ID[,1])
length(seq(0,length(miRNA_ID)-1))
# Convert into ID's and create node and link data for the network.
miRNA_ID[,2] <- seq(0,length(IDs)-1)
View(miRNA_ID)
colnames(miRNA_ID) <- c("name", "ID")
View(miRNA_ID)
View(MisNodes)
View(data)
View(networ_data)
data <- miRNA.targets.CHVC.DEG@data                                                                 # load data
data <- data[!duplicated(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]  # Filter out duplicates
data <- data[data[,"target_entrez"] != "",] # Remove rows with missing entrez ID's
adj.matrix <- matrix(data = 0,
ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
for (i in 1:nrow(data)){
row <- data[i,"target_entrez"]
col <- data[i,"mature_mirna_id"]
adj.matrix[row, col] <- adj.matrix[row, col] + 1
}
#=== Create 3 columned matrix for network visualisation ===#
data[,"Occurance"] <- 1
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
View(networ_data)
View(network_data)
View(MisLinks)
unique(MisNodes[,2])
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
# Convert into ID's and create node and link data for the network.
miRNA_ID[,1] <- seq(0,length(IDs)-1)
colnames(miRNA_ID) <- c("name", "ID")
View(miRNA_ID)
colnames(miRNA_ID) <- c("ID", "name")
View(miRNA_ID)
trial <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name")
View(trial)
View(network_data)
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
View(network_data)
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
View(network_data)
network_data <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name")
View(network_data)
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
miRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
colnames(miRNA_ID) <- c("ID", "name")
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(0,length(IDs) - 1)
colnames(mRNA_ID) <- c("ID", "name")
View(mRNA_ID)
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
colnames(miRNA_ID) <- c("ID", "name")
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(0,length(IDs) - 1)
colnames(mRNA_ID) <- c("ID", "name")
View(network_data)
network_data <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name") # Put mirna ID's in network_data
network_data <- merge(network_data, mRNA_ID, by.x = "target_entrez", by.y = "name") # Put mirna ID's in network_data
View(mRNA_ID)
?merge
nrow(miRNA_ID)
mRNA_ID[,1] <- seq(nrow(miRNA_ID),nrow(miRNA_ID) + length(IDs) - 1)
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
miRNA_ID[,3] <- 1
colnames(miRNA_ID) <- c("ID", "name", "Group")
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 2, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(nrow(miRNA_ID),nrow(miRNA_ID) + length(IDs) - 1)
mRNA_ID[,3] <- 1
colnames(mRNA_ID) <- c("ID", "name", "Group")
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
miRNA_ID[,3] <- 1
colnames(miRNA_ID) <- c("ID", "name", "Group")
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(nrow(miRNA_ID),nrow(miRNA_ID) + length(IDs) - 1)
mRNA_ID[,3] <- 1
colnames(mRNA_ID) <- c("ID", "name", "Group")
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
network_data <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name") # Put mirna ID's in network_data
network_data <- merge(network_data, mRNA_ID, by.x = "target_entrez", by.y = "name") # Put mirna ID's in network_data
View(networ_data)
View(network_data)
remove(networ_data)
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
miRNA_ID[,3] <- 1
colnames(miRNA_ID) <- c("ID", "name", "Group")
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(nrow(miRNA_ID),nrow(miRNA_ID) + length(IDs) - 1)
mRNA_ID[,3] <- 2
colnames(mRNA_ID) <- c("ID", "name", "Group")
network_data <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name", sort = FALSE) # Put mirna ID's in network_data
network_data <- merge(network_data, mRNA_ID, by.x = "target_entrez", by.y = "name", sort = FALSE) # Put mirna ID's in network_data
View(network_data)
# Create link data for network
network_link <- network_data[,c("by.x", "by.y")]
View(network_data)
# Create link data for network
network_link <- network_data[,c("ID.x", "ID.y")]
View(network_link)
colnames(network_link) <- c("Source", "Target")
View(network_link)
# Create node data for network
network_node <- append(miRNA_ID, mrna_ID)
# Create node data for network
network_node <- append(miRNA_ID, mRNA_ID)
network_node
?append
# Create node data for network
network_node <- do.call(rbind, list(miRNA_ID, mRNA_ID))
View(network_node)
?forceNetwork
forceNetwork(network_link, network_node)
# Create node data for network
network_node <- data.frame(do.call(rbind, list(miRNA_ID, mRNA_ID))) # Create node data by stacking the two ID matrices on top of eachother
forceNetwork(network_link, network_node)
# Create link data for network
network_link <- network_data[,c("ID.x", "ID.y", "Occurance")]
colnames(network_link) <- c("Source", "Target", "Value")
View(network_link)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.4,
zoom    = TRUE
)
network_link_filtered <- network_link[network_link[,"Value"] > 1,]
simpleNetwork(network)
forceNetwork(Links   = network_link_filtered,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.4,
zoom    = TRUE
)
network_link_filtered <- network_link[network_link[,"Value"] > 3,]
network_link_filtered <- network_link[network_link[,"Value"] > 5,]
forceNetwork(Links   = network_link_filtered,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.4,
zoom    = TRUE
)
View(mrna.CHVC)
source("Expression_Analysis.R")
mRNA.CHVC <- mRNA.CHVC()
miRNA.targets.CHVC <- get_multimir(mirna = miRNA.CHVC$mirna.Name, summary = TRUE) # Query the miRNA targets
forceNetwork(Links   = network_link_filtered,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.4,
zoom    = TRUE
)
data
View(Data)
View(miRNA.targets.CHVC.DEG)
View(network_link)
View(miRNA.targets.CHVC.DEG)
View(miRNA.targets.CHVC)
data <- miRNA.targets.CHVC.DEG                                                                 # load data
data <- data[!duplicated(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]  # Filter out duplicates
data <- data[data[,"target_entrez"] != "",] # Remove rows with missing entrez ID's
#=== Create 3 columned matrix for network visualisation ===#
data[,"Occurance"] <- 1
network_data <- aggregate(Occurance~mature_mirna_id + target_entrez, data=data,FUN=sum)
View(network_data)
View(data)
# Create miRNA ID's
IDs <- unique(network_data[,"mature_mirna_id"])
miRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
miRNA_ID[,2] <- IDs # Get all unqiue miRNA names
miRNA_ID[,1] <- seq(0,length(IDs) - 1)
miRNA_ID[,3] <- 1
colnames(miRNA_ID) <- c("ID", "name", "Group")
View(mirna)
View(miRNA_ID)
# Create mRNA ID's
IDs <- unique(network_data[,"target_entrez"])
mRNA_ID <- matrix(ncol = 3, nrow = length(IDs))
mRNA_ID[,2] <- IDs # Get all unqiue miRNA names
mRNA_ID[,1] <- seq(nrow(miRNA_ID),nrow(miRNA_ID) + length(IDs) - 1)
mRNA_ID[,3] <- 2
colnames(mRNA_ID) <- c("ID", "name", "Group")
View(mRNA_ID)
network_data <- merge(network_data, miRNA_ID, by.x = "mature_mirna_id", by.y = "name", sort = FALSE) # Put mirna ID's in network_data
network_data <- merge(network_data, mRNA_ID, by.x = "target_entrez", by.y = "name", sort = FALSE) # Put mirna ID's in network_data
View(network_data)
# Create link data for network
network_link <- network_data[,c("ID.x", "ID.y", "Occurance")]
colnames(network_link) <- c("Source", "Target", "Value")
# Create node data for network
network_node <- data.frame(do.call(rbind, list(miRNA_ID, mRNA_ID))) # Create node data by stacking the two ID matrices on top of eachother
View(network_link)
View(network_node)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.4,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
opacity = 0.8,
zoom    = TRUE
)
?saveNetwork
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = JS("function(d){
return Math.sqrt(d.value);} "),
opacity = 0.8,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 4,
opacity = 0.8,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = "Value",
opacity = 0.8,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = "Value"/2,
opacity = 0.8,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = "Value",
opacity = 0.8,
zoom    = TRUE
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = Value,
opacity = 0.8,
zoom    = TRUE
)
miRNA_interaction_network <- forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE
)
saveNetwork(miRNA_interaction_network, "miRNA_interaction_network.html")
saveNetwork(miRNA_interaction_network, "miRNA_interaction_network.html")
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 10
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 30
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 30,
colourScale = c("#E69F00", "#56B4E9")
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 30,
colourScale = c("#E69F00", "#56B4E9")
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 30,
colourScale = c("red", "blue")
)
forceNetwork(Links   = network_link,
Nodes   = network_node,
Source  = "Source",
Target  = "Target",
Value   = "Value",
NodeID  = "name",
Group   = "Group",
linkWidth = 1,
opacity = 0.8,
zoom    = TRUE,
fontSize = 30
)
design_matrix_meta <- design(~ 0 + c(1,2,2,1,3,2,3,1,2,3,1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,3,2,3))
?design
design_matrix_meta <- design(c(1,2,2,1,3,2,3,1,2,3,1,2,3,1,2,1,2,3,1,2,3,1,2,3,1,3,2,3))
?makeContrasts
?lmfit
??lmfit
?lmFit
?table
