source("PCA.R")
#============================================#
##                   mRNA                   ##
#============================================#
#= Drain V Control (DVC) =#
mRNA.DVC <- mRNA.DVC()
source("Expression_Analysis.R")
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
source("PCA.R")
#============================================#
##                   mRNA                   ##
#============================================#
#= Drain V Control (DVC) =#
mRNA.DVC <- mRNA.DVC()
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
source("PCA.R")
#============================================#
##                   mRNA                   ##
#============================================#
#= Drain V Control (DVC) =#
mRNA.DVC <- mRNA.DVC()
#= Cholestatic V Control (CHVC) =#
mRNA.CHVC <- mRNA.CHVC()
#= Cholestatic V Drain (CHVD) =#
mRNA.CHVD <- mRNA.CHVD()
#= PCA =#
PCA.mrna()
PCA.mrnaCorrected()
#= Box Plots =#
mrna.boxPlot()
#= Anova =#
mRNA.Anova <- mrna.Anova()
#= Drain V Control (DVC) =#
miRNA.DVC <- miRNA.DVC()
#= Cholestatic V Control (CHVC) =#
miRNA.CHVC <- miRNA.CHVC()
#= Cholestatic V Drain (CHVD) =#
miRNA.CHVD <- miRNA.CHVD()
#= PCA =#
PCA.mirna()
PCA.mirnaCorrected()
#= Box Plots =#
mirna.boxPlot()
#= Anova =#
miRNA.Anova <- mirna.Anova()
#=========================================#
##         Install libraries             ##
#=========================================#
library(qvalue)
library(limma)
library(edgeR)
BiocManager::install("multiMiR")
#=========================================#
##          Initialise Files             ##
#=========================================#
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
GO <- function(p, #mrna.DEG.CHVC$adj.P
names){
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
return(GO)
}
GO
GO()
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
#= Cholestatic V Drained (CHVD) =#
mirna.targets.CHVD <- get_multimir(mirna = mirna.CHVD$mirna.Name, summary = TRUE)
library(multiMiR)
library(topGO)
library(org.Hs.eg.db)
library(ggplot2)
#= Cholestatic V Control (CHVC) =#
mirna.targets.CHVC <- get_multimir(mirna = mirna.CHVC$mirna.Name, summary = TRUE)
targets.names.CHVC <- data.frame(mRNA = mirna.targets.CHVC@data$target_entrez,
mirna = mirna.targets.CHVC@data$mature_mirna_id,
source = mirna.targets.CHVC@data$pubmed_id)
mirna.targets.DEG.CHVC <- merge(mrna.CHVC, targets.names.CHVC, by = "mRNA", sort = FALSE)
uniqueMirna.targets.DEG.CHVC <- mirna.targets.DEG.CHVC[!duplicated(mirna.targets.DEG.CHVC$mRNA),]
GO.mirna.CHVC <- GO(uniqueMirna.targets.DEG.CHVC$adj.p, uniqueMirna.targets.DEG.CHVC$mRNA)
plotGO(GO.mirna.CHVC,
20,
"GO enrichment Cholestatic vs Control Part2")
#= Cholestatic V Drained (CHVD) =#
mirna.targets.CHVD <- get_multimir(mirna = mirna.CHVD$mirna.Name, summary = TRUE)
targets.names.CHVD <- data.frame(mRNA = mirna.targets.CHVD@data$target_entrez,
mirna = mirna.targets.CHVD@data$mature_mirna_id,
source = mirna.targets.CHVD@data$pubmed_id)
mirna.targets.DEG.CHVD <- merge(mrna.CHVD, targets.names.CHVD, by = "mRNA", sort = FALSE)
uniqueMirna.targets.DEG.CHVD <- mirna.targets.DEG.CHVD[!duplicated(mirna.targets.DEG.CHVD$mRNA),]
GO.mirna.CHVD <- GO(uniqueMirna.targets.DEG.CHVD$adj.p, uniqueMirna.targets.DEG.CHVD$mRNA)
plotGO(GO.mirna.CHVD,
20,
"GO enrichment Cholestatic vs Control Part2")
#Remove rows if source, mRNA and miRNA are duplicated in combination.
unique.Interaction <- mirna.targets.DEG.CHVC[!duplicated(mirna.targets.DEG.CHVC[1, 5, 6]),]
GO <- function(p, #mrna.DEG.CHVC$adj.P
names){
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
return(GO)
}
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(goEnrichment)
}
#=========================================#
##                mRNA                   ##
#=========================================#
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC$adj.p, namesTop.mrna.CHVC) ## Error becauae havent initialised namesTop
plotGO(GO.mrna.CHVC,
20,
"GO enrichment Cholestatic vs Control")
##===== Cholestatic Vs Drained (CHVD) =====##
GO.mrna.CHVD <- GO(mrna.CHVD$adj.p, namesTop.mrna.CHVD)
plotGO(GO.mrna.CHVD,
20,
"GO enrichment Cholestatic vs Drained")
#=========================================#
##               miRNA                   ##
#=========================================#
#= Cholestatic V Control (CHVC) =#
mirna.targets.CHVC <- get_multimir(mirna = mirna.CHVC$mirna.Name, summary = TRUE)
targets.names.CHVC <- data.frame(mRNA = mirna.targets.CHVC@data$target_entrez,
mirna = mirna.targets.CHVC@data$mature_mirna_id,
source = mirna.targets.CHVC@data$pubmed_id)
mirna.targets.DEG.CHVC <- merge(mrna.CHVC, targets.names.CHVC, by = "mRNA", sort = FALSE)
uniqueMirna.targets.DEG.CHVC <- mirna.targets.DEG.CHVC[!duplicated(mirna.targets.DEG.CHVC$mRNA),]
GO.mirna.CHVC <- GO(uniqueMirna.targets.DEG.CHVC$adj.p, uniqueMirna.targets.DEG.CHVC$mRNA)
plotGO(GO.mirna.CHVC,
20,
"GO enrichment Cholestatic vs Control Part2")
#= Cholestatic V Drained (CHVD) =#
mirna.targets.CHVD <- get_multimir(mirna = mirna.CHVD$mirna.Name, summary = TRUE)
targets.names.CHVD <- data.frame(mRNA = mirna.targets.CHVD@data$target_entrez,
mirna = mirna.targets.CHVD@data$mature_mirna_id,
source = mirna.targets.CHVD@data$pubmed_id)
mirna.targets.DEG.CHVD <- merge(mrna.CHVD, targets.names.CHVD, by = "mRNA", sort = FALSE)
uniqueMirna.targets.DEG.CHVD <- mirna.targets.DEG.CHVD[!duplicated(mirna.targets.DEG.CHVD$mRNA),]
GO.mirna.CHVD <- GO(uniqueMirna.targets.DEG.CHVD$adj.p, uniqueMirna.targets.DEG.CHVD$mRNA)
plotGO(GO.mirna.CHVD,
20,
"GO enrichment Cholestatic vs Control Part2")
#Remove rows if source, mRNA and miRNA are duplicated in combination.
unique.Interaction <- mirna.targets.DEG.CHVC[!duplicated(mirna.targets.DEG.CHVC[1, 5, 6]),]
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(goEnrichment)
}
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC$adj.p, namesTop.mrna.CHVC) ## Error becauae havent initialised namesTop
View(miRNA.CHVD)
head(miRNA.CHVD
)
#= Drain V Control (DVC) =#
mRNA.DVC <- mRNA.DVC()
#= Cholestatic V Control (CHVC) =#
mRNA.CHVC <- mRNA.CHVC()
#= Cholestatic V Drain (CHVD) =#
mRNA.CHVD <- mRNA.CHVD()
#= PCA =#
PCA.mrna()
PCA.mrnaCorrected()
#= Box Plots =#
mrna.boxPlot()
#= Anova =#
mRNA.Anova <- mrna.Anova()
#============================================#
##                  miRNA                   ##
#============================================#
#= Drain V Control (DVC) =#
miRNA.DVC <- miRNA.DVC()
#= Cholestatic V Control (CHVC) =#
miRNA.CHVC <- miRNA.CHVC()
#= Cholestatic V Drain (CHVD) =#
miRNA.CHVD <- miRNA.CHVD()
#= PCA =#
PCA.mirna()
PCA.mirnaCorrected()
#= Box Plots =#
mirna.boxPlot()
#= Anova =#
miRNA.Anova <- mirna.Anova()
#= Cholestatic V Control (CHVC) =#
mirna.targets.CHVC <- get_multimir(mirna = mirna.CHVC$mirna.Name, summary = TRUE)
mirna.CHVC <- miRNA.CHVC
#= Cholestatic V Control (CHVC) =#
mirna.targets.CHVC <- get_multimir(mirna = mirna.CHVC$mirna.Name, summary = TRUE)
#=========================================#
##         Install libraries             ##
#=========================================#
BiocManager::install("multiMiR", "topGo", "org.Hs.eg.db", "Rgraphviz")
#=========================================#
##         Install libraries             ##
#=========================================#
BiocManager::install("multiMiR", "topGo", "org.Hs.eg.db", "Rgraphviz")
#=========================================#
##         Install libraries             ##
#=========================================#
BiocManager::install("multiMiR", "topGo", "org.Hs.eg.db", "Rgraphviz")
#=========================================#
##         Install libraries             ##
#=========================================#
BiocManager::install(c("multiMiR", "topGo", "org.Hs.eg.db", "Rgraphviz"))
BiocManager::install("topGo")
BiocManager::install("topGo")
library(qvalue)
library(limma)
library(multiMiR)
library(Rgraphviz)
library(topGO)
library(org.Hs.eg.db)
library(ggplot2)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source("dataFormatting.R")
source("Expression_Analysis.R")
mRNA.DVC <- mRNA.DVC()
mRNA.CHVC <- mRNA.CHVC()
mRNA.CHVD <- mRNA.CHVD()
miRNA.DVC <- miRNA.DVC()
miRNA.CHVC <- miRNA.CHVC()
miRNA.CHVD <- miRNA.CHVD()
GO <- function(p, #mrna.DEG.CHVC$adj.P
names){
allGO2genes <-annFUN.org(whichOnto = "BP",
feasibleGenes = NULL,
mapping = "org.Hs.eg.db",
ID = "entrez")
all <- p
names(all)<-names
GO <- new("topGOdata",
ontology = "BP",
allGenes = all,
annot = annFUN.GO2genes,
geneSel = function(x)x,
GO2genes = allGO2genes,
nodeSize = 10
)
print(GO)
return(GO)
}
plotGO <- function(GO,
show, #number of topNodes to be shown
title
){
results.ks <- runTest(GO, algorithm = "classic", statistic = "ks")
goEnrichment <- GenTable(GO, KS = results.ks, orderBy = "KS", topNodes = show)
goEnrichment <- goEnrichment[goEnrichment$KS < 0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep = ", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels = rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
plot <- ggplot(goEnrichment, aes(x = Term, y = -log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle(title) +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size = 24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle = 0, size = 24, face="bold", vjust = 1),
axis.text.x=element_text(angle = 0, size = 18, face="bold", hjust = 1.10),
axis.text.y=element_text(angle = 0, size = 18, face = "bold", vjust = 0.5),
axis.title=element_text(size = 24, face = "bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size = 18),  #Text size
title=element_text(size = 18)) +
guides(colour=guide_legend(override.aes=list(size = 2.5))) +
coord_flip()
print(plot)
return(goEnrichment)
}
#=========================================#
##                mRNA                   ##
#=========================================#
##===== Cholestatic Vs Control (CHVC) =====##
GO.mrna.CHVC <- GO(mRNA.CHVC[[1]]$adj.p, mRNA.CHVC[[2]]) ## Error becauae havent initialised namesTop
#= Cholestatic V Control (CHVC) =#
mirna.targets.CHVC <- get_multimir(mirna = miRNA.CHVC$mirna.Name, summary = TRUE)
mirna.targets.CHVC2 <- get_multimir(mirna = miRNA.CHVC$mirna.Name)
View(mirna.targets.CHVC2)
View(mirna.targets.CHVC)
targets.names.CHVC <- data.frame(mRNA = mirna.targets.CHVC@data$target_entrez,
mirna = mirna.targets.CHVC@data$mature_mirna_id,
source = mirna.targets.CHVC@data$pubmed_id)
mirna.targets.DEG.CHVC <- merge(mrna.CHVC[[1]], targets.names.CHVC, by = "mRNA", sort = FALSE)
mrna.CHVC <- mRNA.CHVC
mirna.targets.DEG.CHVC <- merge(mrna.CHVC[[1]], targets.names.CHVC, by = "mRNA", sort = FALSE)
mirna.targets.CHVC$summary
mirna.targets.CHVC[1]
mirna.targets.CHVC@summary
mirna.targets.CHVC@data
miRNA.targets.CHVC <- get_multimir(mirna = miRNA.CHVC$mirna.Name, summary = TRUE)
data <- miRNA.targets.CHVC@data
View(data)
colnames(data)
data_filtered <- unique(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")])
View(data_filtered)
?unqiue
?unqiue
?unique
data_filtered <- data[unique(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")])]
data_filtered <- data[unique(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]
data_filtered <- data[!duplicated(df[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]
duplicated(df[,c("mature_mirna_id", "target_entrez", "pubmed_id")
)
df[,c("mature_mirna_id", "target_entrez", "pubmed_id")]
df[c("mature_mirna_id", "target_entrez", "pubmed_id")]
df[[c("mature_mirna_id", "target_entrez", "pubmed_id")]]
df[,c(3,5,9)])
df[,list("mature_mirna_id", "target_entrez", "pubmed_id")]
df[list("mature_mirna_id", "target_entrez", "pubmed_id")]
df[list(3,5,9]
df[list(3,5,9)]
df[,list(3,5,9)]
data_filtered <- data[!duplicated(data[,list("mature_mirna_id", "target_entrez", "pubmed_id")]),]
data[,list("mature_mirna_id", "target_entrez", "pubmed_id")]
data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]
data_filtered <- data[!duplicated(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]
data <- data[!duplicated(data[,c("mature_mirna_id", "target_entrez", "pubmed_id")]),]  # Filter out duplicates
?matrix()
colnames(data)
unqiue(data[,"mature_mirna_id"])
unique(data[,"mature_mirna_id"])
length(unqiue(data[,"mature_mirna_id"]))
length(unique(data[,"mature_mirna_id"]))
length(unique(data[,"target_entrez"]))
adj.matrix <- matrix(ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
View(adj.matrix)
matrix
?matrix
adj.matrix <- matrix(data = 0,
ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
View(adj.matrix)
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
View(adj.matrix)
colnames(data)
row <- data[i,"mature_mirna_id"]
i=1
row <- data[i,"mature_mirna_id"]
row
row <- data[i,"target_entrez"]
col <- data[i,"mature_mirna_id"]
row
col
adj.matrix[row, col] <- adj.matrix[row, col] + 1
View(adj.matrix)
adj.matrix <- matrix(data = 0,
ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
for (i in 1:nrow(data)){
row <- data[i,"target_entrez"]
col <- data[i,"mature_mirna_id"]
adj.matrix[row, col] <- adj.matrix[row, col] + 1
}
row
col
View(adj.matrix)
data <- data[data[,"target_entrez"] != 0]
data <- data[!data[,"target_entrez"] = 0]
data <- data[!isna(data[,"target_entrez"])]
data <- data[!is.na(data[,"target_entrez"])]
is.nais.na(data[,"target_entrez"])
is.na(data[,"target_entrez"])
data <- data[data[,"target_entrez"] != ""]
is.na(data[,"target_entrez"])data[,"target_entrez"] != ""
data[,"target_entrez"] != ""
data[data[,"target_entrez"] != ""]
data <- data[data[,"target_entrez"] != "",]
View(data)
data <- data[data[,"target_entrez"] != "",] # Remove rows with missing entrez ID's
adj.matrix <- matrix(data = 0,
ncol = length(unique(data[,"mature_mirna_id"])),
nrow = length(unique(data[,"target_entrez"])))
colnames(adj.matrix) <- unique(data[,"mature_mirna_id"])
rownames(adj.matrix) <- unique(data[,"target_entrez"])
for (i in 1:nrow(data)){
row <- data[i,"target_entrez"]
col <- data[i,"mature_mirna_id"]
adj.matrix[row, col] <- adj.matrix[row, col] + 1
}
View(adj.matrix)
