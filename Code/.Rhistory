#       # print(labels[j,1])
#       # print(colnames(mirna[i]))
#       # print(labels[j, 3])
#       # print("======")
#     }
#   }
# }
#There is something wrong with naming as FGS_01 is not the first columns and last column is NA
#mrna
rownames(mrna) <- mrna[,1] # Set entrezid as index for mrna; can use key to find gene symbols based on index
mrna <- mrna[,2:29]        # Set mrna to only contain expression values
#mirna
rownames(mirna) <- mirna[,1] # Set mirna names as index for mirna
mirna <- mirna[,2:29]        # Set mirna to only contain expression values
colnames(mirna) <- labels$sample.name[order(labels$treatment.id)] ##REQUIRED!!!! in order to preserve order of miRNA sample naming
#=============================#
##   Create phenotype data   ##     # Do we need this?
#=============================#
# pheno.mrna = labels
# pheno.mrna[[1]] <- colnames(mrna)
# colnames(pheno.mrna) <- c("", "Subtype", "ER")
#
# # Set controls
# case <- pheno.mrna[,'Subtype'] == "cholestatic"
# pheno.mrna[case,3] <- 'case'
#
# # Set drained
# case <- pheno.mrna[,'Subtype'] == "drained"
# pheno.mrna[case,3] <- 'case'
#
# # set controls
# case <- pheno.mrna[,'Subtype'] == "control"
# pheno.mrna[case,3] <- 'control'
#
# # Order cases and controls
# pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
#
# # Set pheno.mirna which is identical to pheno.mrna
# pheno.mirna = pheno.mrna
#
#===============================#
## Summarised experiment class ##   #Do we need this?
#===============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
# pheno.mrna <- as.matrix(pheno.mrna)
# pheno.mirna <- as.matrix(pheno.mirna)
# mrna = data.matrix(mrna)
# mirna = data.matrix(mirna)
#
# # Fill NA's with mean for the time-being
# mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
# mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
#
# # Remove drained cases from mrna
# index = rep(TRUE, length(colnames(mrna)))
# for(i in 1:length(colnames(mrna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mrna <- mrna[,index]
#
# # Remove drained cases from mirna
# index = rep(TRUE, length(colnames(mirna)))
# for(i in 1:length(colnames(mirna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mirna <- mirna[,index]
#
# # Remove drained cases from the phenotype data
# pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
# pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
return(list(mrna, mirna, labels, key))
}
#=========================================#
##         Install libraries             ##
#=========================================#
library(limma)
library(rstudioapi)
BiocManager::install("qvalue")
Data <- format() #Remember to run dataFormatting.R first before initialising data
mrna <- data.frame(Data[1]) #mRNA expression data (contains entrez ID as index)
mirna <- data.frame(Data[2]) #miRNA expression data (contains miRNA name as index)
labels <- data.frame(Data[3]) #batch and treatment id/labels for samples
key <- data.frame(Data[4]) #entrezID to genesymbol key
sampleGroups <- data.frame(treatment = labels$treatment, treatment.id = labels$treatment.id, sampleName = labels$sample.name)
# Get batch order mrna (copied from pca)
mrna.batches <- data.frame(batch = labels$mRNA.batch, batch.id = labels$mRNA.batch.id, file = labels$mRNA.file)
# Get batch order mirna (copied from pca)
mirna.batches <- data.frame(batch = labels$miRNA.batch, batch.id = labels$miRNA.batch.id, file = labels$mRNA.file)
# get mirna treatment order
mirna.treatmentOrder <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(mirna.treatmentOrder) <- "sampleName"
mirna.treatmentOrder[,1] <- colnames(mirna)
mirna.treatmentOrder <- merge(mirna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
mirna.treatmentOrder <- mirna.treatmentOrder[order(mirna.treatmentOrder$treatment.id),] #order based on treatment ID
#========#
#mrna.corrected <- removeBatchEffect(mrna, factor(labels$mRNA.batch.id), design=design1) Move to PCA; only useful for visualisation
#When we creqte this function, design be one of the outputs to be called in PCA.R
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mrna.meta <- read.delim("../Data/metadata_mrna.csv", sep=',',header = TRUE, colClasses = 'character')
conf <- data.frame(sample.name = mrna.meta$Sample[1:28], sex = mrna.meta$gender[1:28], age = mrna.meta$age[1:28], bili.tot = mrna.meta$Bili..tot.[1:28])
# Sex adjustment to get factor for desing matrix
conf$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf$sex.id) #Create a factor of sex, as confounder
# Age for confounder.
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
# WARNING: DIFFERENT ORDER THAN age mirna
age<- c(73.5, 76.4, 67.7, 63, 55.1, 84.5, 24.3, 72.1, 71.7, 70.3, 73.4, 51.5, 52.5, 49.5, 59.2, 57.8, 56.7, 48.1, 66.1, 67.2, 67.6,
41.5, 74.7, 36.3, 75.4, 74.2, 77.8, 59.9) # change to get the data from conf$sex.id but having trouble due to integer/double type.
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control",
"batch2","batch3","batch4","batch5",
"sex","age")
# Contrast matrices
conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
#-----------------------------------------------------------#
# linear model fitting
fit <- lmFit(mrna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit, conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit, conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit, conmat_CHvD))
#--------------------------------------------------------#
# Results for lmfit
result_DvC <- decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC <- decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD <- decideTests(fit_contrast_CHvD)
summary(result_CHvD)
#----------------------------------------------------------#
# Find significant DEGs with log fold change higher than (lfc).
top_genes_DvC = topTable(fit_contrast_DvC,  p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvC = topTable(fit_contrast_CHvC, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvD = topTable(fit_contrast_CHvD, p.value=0.05, number = nrow(mrna), adjust = "BH")
#----------------------------------------------------------#
# Save Entrez ID of DEGs
names_top_DvC <-rownames(top_genes_DvC)
names_top_CHvC<-rownames(top_genes_CHvC)
names_top_CHvD<-rownames(top_genes_CHvD)
# Find gene symbols
symb.DvC<- key$Genesymbol[match(names_top_DvC,key$EntrezID)]
symb.CHvC<- key$Genesymbol[match(names_top_CHvC,key$EntrezID)]
symb.CHvD<- key$Genesymbol[match(names_top_CHvD,key$EntrezID)]
# Create DEG dataframe
DEG_DvC<- data.frame(Gene.Symb=symb.DvC, logFC= top_genes_DvC$logFC,adj.p= top_genes_DvC$adj.P.Val)
#rownames(DEG_DvC)<- names_top_DvC  Uncomment if top_genes_DvC has length different than 0.
DEG_CHvC<- data.frame(Gene.Symb=symb.CHvC,logFC= top_genes_CHvC$logFC,adj.p= top_genes_CHvC$adj.P.Val)
rownames(DEG_CHvC)<- names_top_CHvC
DEG_CHvD<- data.frame(Gene.Symb=symb.CHvD,logFC= top_genes_CHvD$logFC,adj.p= top_genes_CHvD$adj.P.Val)
rownames(DEG_CHvD)<- names_top_CHvD
#---------------------------------------------------------------------------------------#
##                                            MICRO RNA
#---------------------------------------------------------------------------------------#
#mrna.corrected <- removeBatchEffect(mrna, factor(labels$mRNA.batch.id), design=design1) Move to PCA; only useful for visualisation
#When we creqte this function, design be one of the outputs to be called in PCA.R
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mirna.meta <- read.delim("../Data/metadata_mirna.csv", sep=',',header = TRUE, colClasses = 'character')
conf.mirna <- data.frame(sample.name = mirna.meta$Sample[1:28], sex = mirna.meta$gender[1:28], age = mirna.meta$age[1:28], bili.tot = mirna.meta$Bili..tot.[1:28])
# Sex as confounder
conf.mirna$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf.mirna$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex.mirna<- factor(conf.mirna$sex.id) #Create a factor of sex, as confounder
# Age as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age.mirna<- c(73.5, 63.0, 72.1, 73.4, 49.5, 57.8, 66.1, 41.5, 75.4, 76.4, 67.7, 84.5, 71.7, 51.5, 59.2, 56.7,
67.2, 74.7, 77.8, 55.1, 24.3, 70.3, 52.5, 48.1, 67.6, 36.3, 74.2, 59.9)
# Warning: Don't use on design2 factor(labels$treatment.id) it is sorted on the mrna order not miRNA.
# Create desing matrix mirna
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(labels$miRNA.batch.id) + sex.mirna + age.mirna,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control",
"batch2","batch3","batch4","batch5",
"sex","age")
# Create contrast matrices mirna
mirna.conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
mirna.conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
mirna.conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
#----------------------------------------------
# Model fitting mirna
fit.mirna <- lmFit(mirna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit.mirna, mirna.conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit.mirna, mirna.conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit.mirna, mirna.conmat_CHvD))
#----------------------------------------------
# Results lmFit mirna
result_DvC = decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC = decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD = decideTests(fit_contrast_CHvD)
summary(result_CHvD)
#----------------------------------------------
# Find DEGs on miRNA.
mirna.top_genes_DvC = topTable(fit_contrast_DvC, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvC = topTable(fit_contrast_CHvC, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvD = topTable(fit_contrast_CHvD, p.value=0.05, number = nrow(mirna), adjust = "BH")
#----------------------------------------------
# Save Entrez ID of DEGs
mirna.names_top_DvC <-rownames(mirna.top_genes_DvC)
mirna.names_top_CHvC<-rownames(mirna.top_genes_CHvC)
mirna.names_top_CHvD<-rownames(mirna.top_genes_CHvD)
# Find gene symbols
mirna.symb.DvC<- key$Genesymbol[match(mirna.names_top_DvC, key$EntrezID)]
mirna.symb.CHvC<- key$Genesymbol[match(mirna.names_top_CHvC, key$EntrezID)]
mirna.symb.CHvD<- key$Genesymbol[match(mirna.names_top_CHvD, key$EntrezID)]
# Create DEG dataframe
mirna.DEG_DvC<- data.frame(Gene.Symb=mirna.symb.DvC, logFC= mirna.top_genes_DvC$logFC,adj.p= mirna.top_genes_DvC$adj.P.Val)
#rownames(DEG_DvC)<- names_top_DvC  Uncomment if top_genes_DvC has length different than 0.
mirna.DEG_CHvC<- data.frame(Gene.Symb=mirna.symb.CHvC,logFC= mirna.top_genes_CHvC$logFC, adj.p= mirna.top_genes_CHvC$adj.P.Val)
rownames(DEG_CHvC)<- mirna.names_top_CHvC
mirna.DEG_CHvD<- data.frame(Gene.Symb=mirna.symb.CHvD,logFC= mirna.top_genes_CHvD$logFC, adj.p= mirna.top_genes_CHvD$adj.P.Val)
rownames(DEG_CHvD)<- mirna.names_top_CHvD
mirna.DEG_CHvC<- data.frame(Gene.Symb=mirna.symb.CHvC,logFC= mirna.top_genes_CHvC$logFC, adj.p= mirna.top_genes_CHvC$adj.P.Val)
rownames(mirna.DEG_CHvC)<- mirna.names_top_CHvC
mirna.DEG_CHvD<- data.frame(Gene.Symb=mirna.symb.CHvD,logFC= mirna.top_genes_CHvD$logFC, adj.p= mirna.top_genes_CHvD$adj.P.Val)
rownames(mirna.DEG_CHvD)<- mirna.names_top_CHvD
BiocManager::install("topGO")
BiocManager::install("miRNAtap")
library ("topGO")
library("org.Hs.eg.db")
library(ggplot2)
library("miRNAtap")
predictions = getPredictedTargets(rownames(mirna.DEG_CHvC), species = 'hsa',
+ method = 'geom', min_src = 2)
predictions <- getPredictedTargets(rownames(mirna.DEG_CHvC), species = 'hsa',
+ method = 'geom', min_src = 2)
predictions <- getPredictedTargets(rownames(mirna.DEG_CHvC), species = 'hsa',
method = 'geom', min_src = 2)
predictions <- getPredictedTargets('miR-10b', species = 'hsa',
method = 'geom', min_src = 2)
# Mirna
mir = 'miR-10b'
predictions <- getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
predictions <- getPredictedTargets(mir, species = 'hsa',
+ method = 'geom', min_src = 2)
predictions <- getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
library(miRNAtap)
# Mirna
mir = 'miR-10b'
predictions <- getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
targets_mouse <- getPredictedTargets('let-7a',species='mmu', method='geom')
predictions <- getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 1)
library(miRNAtap)
predictions <- getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 1)
library(miRNAtap.db)
getPredictedTargets('let-7a',species='hsa', method = 'min
a<-  getPredictedTargets('let-7a',species='hsa', method = 'min
a<-  getPredictedTargets('let-7a',species='hsa', method = 'min)
a<-  getPredictedTargets('let-7a',species='hsa', method = 'min)
a<- getPredictedTargets('let-7a',species='hsa', method = 'min')
library(miRNAtap)
targets <- getPredictedTargets('let-7a',species='hsa', method = 'min')
head(targets) #top of the list with minimum aggregation
targets2 <- getPredictedTargets('let-7a',species='hsa', method='geom')
head(targets2) #top of the list with geometric mean aggregation
library(miRNAtap)
library(topGO)
library(org.Hs.eg.db)
mir = 'miR-10b'
predictions = getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
BiocManager::install("miRNAtap")
library(miRNAtap)
library(topGO)
library(org.Hs.eg.db)
mir = 'miR-10b'
predictions = getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
BiocManager::install("miRNAtap")
library(miRNAtap)
mir = 'miR-10b'
predictions = getPredictedTargets(mir, species = 'hsa',
method = 'geom', min_src = 2)
# option 2
BiocManager::install("multiMiR")
library(multiMiR)
example1 <- get_multimir(mirna='hsa-miR-18a-3p', summary=TRUE)
View(example1)
View(example1)
View(example1@data)
example1@data
example1 <- get_multimir(mirna=mirna.names_top_CHvC, summary=TRUE)
View(example1)
View(example1@summary)
targets.mirna_CHvC <- get_multimir(mirna=mirna.names_top_CHvC, summary=TRUE)
genes.mirna_CHvC<- targets.mirna_CHvC@data$target_entrez
all.genes<-rep(1,length(genes.mirna_CHvC))
names(all.genes)<- genes.mirna_CHvC
all.genes
GOdata_mirna.CHvC <- new("topGOdata",
ontology="BP",
allGenes= all.genes,
annot=annFUN.GO2genes,
geneSel= function(x)x,
GO2genes=allGO2genes,
nodeSize=1)
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Hs.eg.db", ID="entrez")
GOdata_mirna.CHvC <- new("topGOdata",
ontology="BP",
allGenes= all.genes,
annot=annFUN.GO2genes,
geneSel= function(x)x,
GO2genes=allGO2genes,
nodeSize=5)
GOdata_mirna.CHvC
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata_CHvC, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(mirna.GOdata_CHvC, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle("GO enrichment Cholestatic vs control 1") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
View(goEnrichment)
View(GOdata_mirna.CHvC)
View(targets.mirna_CHvC)
View(targets.mirna_CHvC@summary)
View(targets.mirna_CHvC)
View(targets.mirna_CHvC@data)
View(targets.mirna_CHvC@summary)
all.genes<- targets.mirna_CHvC@summary$validated.sum
names(all.genes)<- genes.mirna_CHvC
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Hs.eg.db", ID="entrez")
targets.mirna_CHvC@summary$validated.sum
View(goEnrichment)
View(targets.mirna_CHvC)
View(targets.mirna_CHvC@summary)
genes.mirna_CHvC<- targets.mirna_CHvC@summary$target_entrez
all.genes<- targets.mirna_CHvC@summary$validated.sum
names(all.genes)<- genes.mirna_CHvC
allGO2genes <- annFUN.org(whichOnto="BP", feasibleGenes=NULL, mapping="org.Hs.eg.db", ID="entrez")
GOdata_mirna.CHvC <- new("topGOdata",
ontology="BP",
allGenes= all.genes,
annot=annFUN.GO2genes,
geneSel= function(x)x,
GO2genes=allGO2genes,
nodeSize=5)
GOdata_mirna.CHvC
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle("GO enrichment Cholestatic vs control 1") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks, orderBy="KS", topNodes=20)
#goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle("GO enrichment Cholestatic vs control 1") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
View(goEnrichment)
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
View(results.ks)
View(results.ks)
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks, orderBy="KS", topNodes=20)
View(goEnrichment)
View(results.ks)
results.ks <- runTest(GOdata_mirna.CHvC, algorithm="classic", statistic="ks")
results.ks
View(results.ks)
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks@score, orderBy="KS", topNodes=20)
goEnrichment <- GenTable(GOdata_mirna.CHvC, KS=results.ks, orderBy="KS", topNodes=20)
View(goEnrichment)
View(GOdata_mirna.CHvC)
?GenTable
printGraph(GOdata_CHvC, resultWeight, firstSigNodes = 5, fn.prefix = "tGO",
+ pdfSW = TRUE)
printGraph(GOdata_CHvC, resultWeight, firstSigNodes = 5, fn.prefix = "tGO",
pdfSW = TRUE)
GOdata_CHvC <- new("topGOdata",
ontology="BP",
allGenes= all.genes,
annot=annFUN.GO2genes,
geneSel= function(x)x,
GO2genes=allGO2genes,
nodeSize=1)
GOdata_CHvC
results.ks <- runTest(GOdata_CHvC, algorithm="classic", statistic="ks")
goEnrichment <- GenTable(GOdata_CHvC, KS=results.ks, orderBy="KS", topNodes=20)
goEnrichment <- goEnrichment[goEnrichment$KS<0.05,]
goEnrichment <- goEnrichment[,c("GO.ID","Term","KS")]
goEnrichment$Term <- gsub(" [a-z]*\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- gsub("\\.\\.\\.$", "", goEnrichment$Term)
goEnrichment$Term <- paste(goEnrichment$GO.ID, goEnrichment$Term, sep=", ")
goEnrichment$Term <- factor(goEnrichment$Term, levels=rev(goEnrichment$Term))
goEnrichment$KS <- as.numeric(goEnrichment$KS)
ggplot(goEnrichment, aes(x=Term, y=-log10(KS))) +
stat_summary(geom = "bar", fun.y = mean, position = "dodge") +
xlab("Biological process") +
ylab("Enrichment") +
ggtitle("GO enrichment Cholestatic vs control 1") +
scale_y_continuous(breaks = round(seq(0, max(-log10(goEnrichment$KS)), by = 2), 1)) +
theme_bw(base_size=24) +
theme(
legend.position='none',
legend.background=element_rect(),
plot.title=element_text(angle=0, size=24, face="bold", vjust=1),
axis.text.x=element_text(angle=0, size=18, face="bold", hjust=1.10),
axis.text.y=element_text(angle=0, size=18, face="bold", vjust=0.5),
axis.title=element_text(size=24, face="bold"),
legend.key=element_blank(),     #removes the border
legend.key.size=unit(1, "cm"),      #Sets overall area/size of the legend
legend.text=element_text(size=18),  #Text size
title=element_text(size=18)) +
guides(colour=guide_legend(override.aes=list(size=2.5))) +
coord_flip()
printGraph(GOdata_CHvC, resultWeight, firstSigNodes = 5, fn.prefix = "tGO",
pdfSW = TRUE)
printGraph(GOdata_CHvC, resultWeight, firstSigNodes = 5, fn.prefix = "tGO",
pdfSW = TRUE)
printGraph(GOdata_CHvC, firstSigNodes = 5, fn.prefix = "tGO",
pdfSW = TRUE)
