?c()
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
ls()
setRepositories(FALSE, 1:9)
install.packages(c('gplots', 'limma', 'pcaMethods'))
library(pcaMethods)
library(limma)
boxplot()
gxData.raw
boxplot()
boxplot()
ls()
library(gtools)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
# 1.1 Import the text file containing the data into a new object 'gxData.raw'
#----------------------------------------------------------------------------#
# HINT: use the first column as rownames in your object.
setwd(DATA.DIR)
## STEP 1: Set working directory to MSB1005-WGCNA-2019 folder.
Change location to current file location
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
```
```{r}
library(rstudioapi)
install.packages(c("BiocManager", "igraph", "rstudioapi", "WGCNA"))
```{r}
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
## STEP 2: Packages
Install the required packages if necessary
```{r}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
install.packages("WGCNA")
install.packages("WGCNA")
source("http://bioconductor.org/biocLite.R")
biocLite("impute")
BiocManager::install("WGCNA")
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
library(topGO)
library(org.Hs.eg.db)
#library(WGCNA
library(RCy3
library(igraph
library(WGCNA)
library(RCy3)
library(igraph)
options(stringsAsFactors = F)
geneExpressionData <- read.delim("Hypoxia-data-WGCNA.txt", as.is = T)
install.packages(c("fields", "impute", "dynamicTreeCut", "qvalue", "flashClust", "Hmisc") )
library(topGO)
library(org.Hs.eg.db)
library(WGCNA)
library(RCy3)
#uncomment if not yet installed!
BiocManager::install(c("topGO", "org.Hs.eg.db", "WGCNA", "RCy3", "igraph"))
install.packages("WGCNA")
#### TEST PCA WITH CORRECTION###
y2 <- removeBatchEffect(mrna[, 2:29], factor(c(1,1,1,2,2,2,3,3,4,
1,1,1,2,2,2,3,3,3,4,
1,1,2,2,3,3,3,4,4)))
library(anamiR)
library(rstudioapi)
library(limma)
library(qvalue)
library(tidyverse)
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
mrna[is.na(mrna)] <- NA # Change all the NaNs to NA in the mRNA object.
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
#======== For mRNA ===================#
design_matrix_mrna <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix_mrna) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix_mrna)
fit <- lmFit(mrna[, 2:29], design_matrix_mrna)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, p.value = "0.05", number = nrow(mrna), adjust = "BH")
for (i in 1:ncol(fit_contrast)){
volcanoplot(fit_contrast[,i], main= colnames(fit_contrast)[i], col=ifelse(fit_contrast[,i]$p.value > 0.05,"red","black"))
abline(-log10(0.05),0)
abline(v=log2(2))
abline(v=-log2(2))
}
design_matrix <- model.matrix(~ 0 + factor(sampleGroups$id))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, p.value = "0.05", number = nrow(mirna), adjust = "BH")
for (i in 1:ncol(fit_contrast2)){
volcanoplot(fit_contrast2[,i], main= colnames(fit_contrast2)[i], col=ifelse(fit_contrast2[,i]$p.value > 0.05,"red","black"))
abline(-log10(0.05),0)
abline(v=log2(2))
abline(v=-log2(2))
}
mrna_drained_v_control_pvalue <- qvalue(fit_contrast$p.value[,1])
mrna_cholestasis_v_control_pvalue <- qvalue(fit_contrast$p.value[,2])
mrna_cholestasis_v_drained_pvalue <- qvalue(fit_contrast$p.value[,3])
# Adjust all p values using qvalue() for the miRNA set
mirna_drained_v_control_pvalue <- qvalue(fit_contrast2$p.value[,1])
mirna_cholestasis_v_control_pvalue <- qvalue(fit_contrast2$p.value[,2])
mirna_cholestasis_v_drained_pvalue <- qvalue(fit_contrast2$p.value[,3])
cont_matrix <- makeContrasts (drained_v_control = drained - control,
levels = design_matrix)
fit2 <- lmFit(mirna[, 2:29], design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
mrna_batch_410978 <- mrna[, c(2, 5, 3, 4, 7, 6, 8, 9), drop=F]
mrna_batch_410979 <- mrna[, c(12, 15, 17, 10, 13, 16, 11, 14), drop=F]
mrna_batch_410980 <- mrna[, c(20, 23, 18, 21, 24, 19, 22, 25), drop=F]
mrna_batch_412287 <- mrna[, c(26, 28, 27, 29), drop=F]
y2 <- removeBatchEffect(mrna[,2:29], mrna_batch_410978[,2:length(mrna_batch_410978)], mrna_batch_410980[,2:length(mrna_batch_410980)])
par(mfrow=c(1,2))
boxplot(as.data.frame(mrna[,3:29]),main="Original")
boxplot(as.data.frame(y2),main="Batch corrected")
controls<- subset(sampleGroups, Treatment== "control")
cholestatic<- subset(sampleGroups, Treatment== "cholestatic")
drained<- subset(sampleGroups, Treatment== "drained")
drained_mrna<-mrna[match(drained$SampleName, colnames(mrna))]
cholestatic_mrna<-mrna[match(cholestatic$SampleName, colnames(mrna))]
controls_mrna<-mrna[match(controls$SampleName, colnames(mrna))]
#### TEST PCA WITH CORRECTION###
y2 <- removeBatchEffect(mrna[, 2:29], factor(c(1,1,1,2,2,2,3,3,4,
1,1,1,2,2,2,3,3,3,4,
1,1,2,2,3,3,3,4,4)))
View(y2)
pcaRes2 <- pca(t(y2),nPcs = 10)  # perform PCA
require(limma)
require(pcaMethods)
require(gplots)
require(ggplot2)
pcaRes2 <- pca(t(y2),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat, shape=PCA_28mrna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
#MRNA for 28 samples
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna_treat<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
treat=labels$V2)
colnames(PCA_28mrna_treat) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_28mrna_treat, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for all microRNA (17581)
mrna[is.na(mrna)] <- NA # change Nan for NA
#### TEST PCA WITH CORRECTION###
y2 <- removeBatchEffect(mrna[, 2:29], factor(c(1,1,1,2,2,2,3,3,4,
1,1,1,2,2,2,3,3,3,4,
1,1,2,2,3,3,3,4,4)))
pcaRes2 <- pca(t(y2),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat, shape=PCA_28mrna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
#### TEST PCA WITH CORRECTION###
y2 <- removeBatchEffect(mrna[, 2:29], factor(c(1,1,1,2,2,2,3,3,4,
1,1,1,2,2,2,3,3,3,4,
1,1,2,2,3,3,3,4,4)))
pcaRes2 <- pca(t(y2),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat, shape=PCA_28mrna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
#############  PCA FOR BATCHES  ######################
y2 <- removeBatchEffect(mrna[, 2:29], factor(c(1,1,1,2,2,2,3,3,4,
1,1,1,2,2,2,3,3,3,4,
1,1,2,2,3,3,3,4,4)))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mrna = subset(mrna, select = -2) # Remove gene symbol column
names_mrna = colnames(mrna[,2:length(mrna)]) #
batch_number_mrna <- data.frame(Batch_num= substr(unlist(names_mrna), 8, 13)) #Only keep the batch number
name_batches<- unique(batch_number_mrna)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes2 <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna<- data.frame(c(pcaRes2@scores[,1]),
pcaRes2@scores[,2],
pcaRes2@scores[,3],
pcaRes2@scores[,4],
pcaRes2@scores[,5],
batch= batch_number_mrna)
colnames(PCA_28mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "Batches")
ggplot(PCA_28mrna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat, shape=PCA_28mrna$Batches)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19","#66049b"),
aesthetics = "fill") +
theme_light()
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)
batch_number_mirna <- data.frame(Batch_num= substr(unlist(colnames(mirna[,2:length(mirna)])), 12, 23)) #Only keep the batch number
# MIRNA pca for 28 samples
mirna[is.na(mirna)] <- NA # change Nan for NA
pcaRes_mirna28_treat <- pca(t(mirna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mirna_treat<- data.frame(c(pcaRes_mirna28_treat@scores[,1]),
pcaRes_mirna28_treat@scores[,2],
pcaRes_mirna28_treat@scores[,3],
pcaRes_mirna28_treat@scores[,4],
pcaRes_mirna28_treat@scores[,5],
treat=labels$V2)
pcaRes_mirna28_treat <- pca(t(mirna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mirna_treat<- data.frame(c(pcaRes_mirna28_treat@scores[,1]),
pcaRes_mirna28_treat@scores[,2],
pcaRes_mirna28_treat@scores[,3],
pcaRes_mirna28_treat@scores[,4],
pcaRes_mirna28_treat@scores[,5],
treat=labels$V2)
colnames(PCA_28mirna_treat) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5", "treat")
ggplot(PCA_28mirna_treat, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mirna_treat$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
# MIRNA pca for all microRNA (1758)
mirna[is.na(mirna)] <- NA # change Nan for NA
PCA_mirna17581_treat <- pca(mirna[,2:29],nPcs = 10)  # perform PCA
PCA_1758mirna<- data.frame(c(PCA_mirna17581_treat@scores[,1]),
PCA_mirna17581_treat@scores[,2],
PCA_mirna17581_treat@scores[,3],
PCA_mirna17581_treat@scores[,4],
PCA_mirna17581_treat@scores[,5],
treat=labels$V2)
colnames(PCA_1758mirna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_1758mirna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_1758mirna$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
# MIRNA pca for all microRNA (1758)
mirna[is.na(mirna)] <- NA # change Nan for NA
pcaRes_mirna17581_treat <- pca(mirna[,2:29],nPcs = 10)  # perform PCA
PCA_1758mirna<- data.frame(c(pcaRes_mirna17581_treat@scores[,1]),
pcaRes_mirna17581_treat@scores[,2],
pcaRes_mirna17581_treat@scores[,3],
pcaRes_mirna17581_treat@scores[,4],
pcaRes_mirna17581_treat@scores[,5],
treat=labels$V2)
colnames(PCA_1758mirna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_1758mirna, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_1758mirna$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for 28 samples
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes_mrna28_treat <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna_treat<- data.frame(c(pcaRes_mrna28_treat@scores[,1]),
pcaRes_mrna28_treat@scores[,2],
pcaRes_mrna28_treat@scores[,3],
pcaRes_mrna28_treat@scores[,4],
pcaRes_mrna28_treat@scores[,5],
treat=labels$V2)
colnames(PCA_28mrna_treat) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_28mrna_treat, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
# MIRNA pca for all microRNA (1758)
mirna[is.na(mirna)] <- NA # change Nan for NA
pcaRes_mirna17581_treat <- pca(mirna[,2:29],nPcs = 10)  # perform PCA
PCA_1758mirna<- data.frame(c(pcaRes_mirna17581_treat@scores[,1]),
pcaRes_mirna17581_treat@scores[,2],
pcaRes_mirna17581_treat@scores[,3],
pcaRes_mirna17581_treat@scores[,4],
pcaRes_mirna17581_treat@scores[,5],
treat=labels$V2)
colnames(PCA_1758mirna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_1758mirna, aes(x = PCA1, y = PCA2)) +
geom_point(aes()) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for 28 samples
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes_mrna28_treat <- pca(t(mrna[,2:29]),nPcs = 10)  # perform PCA
PCA_28mrna_treat<- data.frame(c(pcaRes_mrna28_treat@scores[,1]),
pcaRes_mrna28_treat@scores[,2],
pcaRes_mrna28_treat@scores[,3],
pcaRes_mrna28_treat@scores[,4],
pcaRes_mrna28_treat@scores[,5],
treat=labels$V2)
colnames(PCA_28mrna_treat) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5","treat")
ggplot(PCA_28mrna_treat, aes(x = PCA1, y = PCA2)) +
geom_point(aes(colour = PCA_28mrna_treat$treat)) +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
#MRNA for all microRNA (17581)
mrna[is.na(mrna)] <- NA # change Nan for NA
pcaRes_mrna17581_treat <- pca(mrna[,2:29],nPcs = 10)  # perform PCA
PCA_1758mrna<- data.frame(c(pcaRes_mrna17581_treat@scores[,1]),
pcaRes_mrna17581_treat@scores[,2],
pcaRes_mrna17581_treat@scores[,3],
pcaRes_mrna17581_treat@scores[,4],
pcaRes_mrna17581_treat@scores[,5])
colnames(PCA_1758mrna) = c("PCA1", "PCA2", "PCA3","PCA4", "PCA5")
ggplot(PCA_1758mrna, aes(x = PCA1, y = PCA2)) +
geom_point() +
scale_colour_manual(values = c("#04179b", "#da9e00", "#198c19"),
aesthetics = "fill") +
theme_light()
