n <- n + 1
}
}
}
return(corr)
}
corr <- cal_cor(mrna_data, mirna_data, cut.off)
n <- 1
corr <- list()
for (i in seq_len(nrow(data_1))) {
for (j in seq_len(nrow(data_2))) {
mrna <- as.numeric(data_1[i, 1:(ncol(mrna_data) - 5)])
mirna <- as.numeric(data_2[j, 1:(ncol(mirna_data) - 5)])
tmp <- stats::cor(mrna, mirna, method = method)
#print(tmp)
if (tmp < cor_cut) {
corr[[n]] <- row.names(data_2)[j]
corr[[n]][2] <- row.names(data_1)[i]
corr[[n]][3] <- tmp
corr[[n]][4] <- data_2[["log-ratio"]][j]
corr[[n]][5] <- data_2[["P-adjust"]][j]
corr[[n]][6] <- data_2[["mean_case"]][j]
corr[[n]][7] <- data_2[["mean_control"]][j]
corr[[n]][8] <- data_1[["log-ratio"]][i]
corr[[n]][9] <- data_1[["P-adjust"]][i]
corr[[n]][10] <- data_1[["mean_case"]][i]
corr[[n]][11] <- data_1[["mean_control"]][i]
n <- n + 1
}
}
}
i = 1
j = 1
mrna <- as.numeric(data_1[i, 1:(ncol(mrna_data) - 5)])
mirna <- as.numeric(data_2[j, 1:(ncol(mirna_data) - 5)])
tmp <- stats::cor(mrna, mirna, method = method)
tmp < cor_cut
cor_cut
tmp
print(tmp)
tmp <- stats::cor(mrna, mirna, method = method)
stats::cor(mrna, mirna, method = method)
?stats::cor
head(mrna)
head(data_1)
typeof(mrna)
typeof(mirna)
head(mirna)
stats::cor(-1.962174, 1.953778, method = method)
stats::cor(-1.962174, 1.953778, method = method)
stats::cor(-1.962174, 1.953778, method = "pearson")
stats::cor(-1.962174, 1.95377)
stats::cor(data_1, data_2)
mrna_d
head(mrna_d)
head(mrna)
cor_cut <- -0.5
stats::cor(mrna, mirna, method = method)
?interesect
?intersect
common_column
mrna_data
head(mrna_data)
head(mrna_d)
?cor
head(mrna)
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim("Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
#=============================#
# Different gene expression  #
#=============================#
# First we identify differentially expressed genes for the mRNA's
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit <- lmFit(mrna, design_matrix)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, number = nrow(mrna), adjust = "BH")
# Subsequently we do the same for the miRNA data
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
#Here we change NA's with rownmeans SHOULD BE CHANGED LATER!!!
omitmirna <- mirna
# # We set the rownames of omitmirna to its first column
rownames(omitmirna) <- omitmirna[[1]]
omitmirna <- omitmirna[,2:length(omitmirna)]
omitmirna[is.na(omitmirna)] <- mean(as.matrix(mirna), na.rm = TRUE)
fit2 <- lmFit(omitmirna, design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
#=============================#
# Create phenotype data       #
#=============================#
pheno.mrna = labels
pheno.mrna[[1]] <- colnames(mrna)
colnames(pheno.mrna) <- c("", "Subtype", "ER")
# Set controls
case <- pheno.mrna[,'Subtype'] == "cholestatic"
pheno.mrna[case,3] <- 'case'
# Set drained
case <- pheno.mrna[,'Subtype'] == "drained"
pheno.mrna[case,3] <- 'case'
# set controls
case <- pheno.mrna[,'Subtype'] == "control"
pheno.mrna[case,3] <- 'control'
# Order cases and controls
pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
# Set pheno.mirna which is identical to pheno.mrna
pheno.mirna = pheno.mrna
#=============================#
# Summarised experiment class #
#=============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
pheno.mrna <- as.matrix(pheno.mrna)
pheno.mirna <- as.matrix(pheno.mirna)
mrna = data.matrix(mrna)
mirna = data.matrix(mirna)
# Fill NA's with mean for the time-being
mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
# Remove drained cases from mrna
index = rep(TRUE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mrna <- mrna[,index]
# Remove drained cases from mirna
index = rep(TRUE, length(colnames(mirna)))
for(i in 1:length(colnames(mirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mirna <- mirna[,index]
# Remove drained cases from the phenotype data
pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
#=============================#
# Change DE gene table format #
#=============================#
# First we change the layout for the mRNA data
mrna_d <- top_genes[,c(2,6,7)]
mrna_d[["mean_case"]] <- 0
mrna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,3]=="case",1]){
index[i] <- TRUE
}
}
mrna.case <- mrna[,index]
mrna.control <- mrna[,!index]
# Calculate means
mean_control <- rowMeans(mrna.control)
mean_case <- rowMeans(mrna.case)
# Include means in mrna_D
mrna_d[[4]] <- mean_case
mrna_d[[5]] <- mean_control
colnames(mrna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
#===========================================#
# Now we change the format for the miRNA data
#===========================================#
mirna_d <- top_genes2[,c(2,6,7)]
mirna_d[["mean_case"]] <- 0
mirna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(omitmirna)))
for(i in 1:length(colnames(omitmirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(omitmirna)[i] %in% pheno.mirna[pheno.mirna[,3]=="case",1]){
index[i] <- TRUE
}
}
mirna.case <- omitmirna[,index]
mirna.control <- omitmirna[,!index]
# Calculate means
mean_control <- rowMeans(mirna.control[,2:length(mirna.control)])
mean_case <- rowMeans(mirna.case[,2:length(mirna.case)])
# Include means in omitmirna
mirna_d[[4]] <- mean_case
mirna_d[[5]] <- mean_control
colnames(mirna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
# # Set first column of phenotype data as rowname
# rownames(pheno.mrna) <- pheno.mrna[,1]
# pheno.mrna <- pheno.mrna[,2:3]
# pheno.mirna <- pheno.mrna # pheno.mirna is identical to pheno.mrna (for clarity they both exist)
#
stats::cor(mrna[1,], mirna[1,], method = method)
mirna[1,]
head(mirna)
head(mrna)
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE) #Load miRNA expression data
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
# Column names are different for miRNA and mRNA datasets, but are conserved with sample names in SampleGroups.xlsx
#IE FGS_01 is the name of sample 1;
#where miRNA sample is US10063773_254606410403_S01_miRNA_107_Sep09_1_1 - 2;
#and mRNA sample is FGS_01_410978_1_1
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2) # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
columns = colnames(mirna)
columns[[1]] <- 'miRNA'
for (i in rep(2:length(colnames(mirna)))){
for ( j in rep(1:nrow(labels))){
if(colnames(mirna[i]) == labels[j,1]){
columns[[i]] = labels[j,3] # Assign correct column name to array
# print(labels[j,1])
# print(colnames(mirna[i]))
# print(labels[j, 3])
# print("======")
}
}
}
colnames(mirna) <- columns
# Set rownames for mrna
rownames(mrna) <- mrna[,1]
mrna <- mrna[,2:29]
# Set rownames for mirna
rownames(mirna) <- mirna[,1]
mirna <- mirna[,2:29]
#=== Here we initialise the sample grouping ===
sampleGroups <- read.delim("Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
index_cholestatic <- sampleGroups == 'cholestatic'
sampleGroups$id[index_cholestatic[,1]] <- 1
index_drained <- sampleGroups == 'drained'
sampleGroups$id[index_drained[,1]] <- 2
index_control <- sampleGroups == 'control'
sampleGroups$id[index_control[,1]] <- 3
#=============================#
# Different gene expression  #
#=============================#
# First we identify differentially expressed genes for the mRNA's
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
fit <- lmFit(mrna, design_matrix)
fit_contrast <- contrasts.fit(fit, cont_matrix)
fit_contrast <- eBayes(fit_contrast)
results <- decideTests(fit_contrast)
summary(results)
top_genes <- topTable (fit_contrast, number = nrow(mrna), adjust = "BH")
# Subsequently we do the same for the miRNA data
design_matrix <- model.matrix(~ 0 + factor(c(1,1,1,1,1,1,1,1,1,
2,2,2,2,2,2,2,2,2,2,
3,3,3,3,3,3,3,3,3)))
colnames(design_matrix) <- c("cholestasis", "drained", "control")
cont_matrix <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design_matrix)
#Here we change NA's with rownmeans SHOULD BE CHANGED LATER!!!
omitmirna <- mirna
# # We set the rownames of omitmirna to its first column
rownames(omitmirna) <- omitmirna[[1]]
omitmirna <- omitmirna[,2:length(omitmirna)]
omitmirna[is.na(omitmirna)] <- mean(as.matrix(mirna), na.rm = TRUE)
fit2 <- lmFit(omitmirna, design_matrix)
fit_contrast2 <- contrasts.fit(fit2, cont_matrix)
fit_contrast2 <- eBayes(fit_contrast2)
results2 <- decideTests(fit_contrast2)
summary(results2)
top_genes2 <- topTable (fit_contrast2, number = nrow(mirna), adjust = "BH")
#=============================#
# Create phenotype data       #
#=============================#
pheno.mrna = labels
pheno.mrna[[1]] <- colnames(mrna)
colnames(pheno.mrna) <- c("", "Subtype", "ER")
# Set controls
case <- pheno.mrna[,'Subtype'] == "cholestatic"
pheno.mrna[case,3] <- 'case'
# Set drained
case <- pheno.mrna[,'Subtype'] == "drained"
pheno.mrna[case,3] <- 'case'
# set controls
case <- pheno.mrna[,'Subtype'] == "control"
pheno.mrna[case,3] <- 'control'
# Order cases and controls
pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
# Set pheno.mirna which is identical to pheno.mrna
pheno.mirna = pheno.mrna
#=============================#
# Summarised experiment class #
#=============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
pheno.mrna <- as.matrix(pheno.mrna)
pheno.mirna <- as.matrix(pheno.mirna)
mrna = data.matrix(mrna)
mirna = data.matrix(mirna)
# Fill NA's with mean for the time-being
mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
# Remove drained cases from mrna
index = rep(TRUE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mrna <- mrna[,index]
# Remove drained cases from mirna
index = rep(TRUE, length(colnames(mirna)))
for(i in 1:length(colnames(mirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
index[i] <- FALSE
}
}
mirna <- mirna[,index]
# Remove drained cases from the phenotype data
pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
#=============================#
# Change DE gene table format #
#=============================#
# First we change the layout for the mRNA data
mrna_d <- top_genes[,c(2,6,7)]
mrna_d[["mean_case"]] <- 0
mrna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(mrna)))
for(i in 1:length(colnames(mrna))){
# if current column name is present in a list of all column names of cases:
if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,3]=="case",1]){
index[i] <- TRUE
}
}
mrna.case <- mrna[,index]
mrna.control <- mrna[,!index]
# Calculate means
mean_control <- rowMeans(mrna.control)
mean_case <- rowMeans(mrna.case)
# Include means in mrna_D
mrna_d[[4]] <- mean_case
mrna_d[[5]] <- mean_control
colnames(mrna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
#===========================================#
# Now we change the format for the miRNA data
#===========================================#
mirna_d <- top_genes2[,c(2,6,7)]
mirna_d[["mean_case"]] <- 0
mirna_d[["mean_control"]] <- 0
# Seperate controls from cases
index = rep(FALSE, length(colnames(omitmirna)))
for(i in 1:length(colnames(omitmirna))){
# if current column name is present in a list of all column names of cases:
if(colnames(omitmirna)[i] %in% pheno.mirna[pheno.mirna[,3]=="case",1]){
index[i] <- TRUE
}
}
mirna.case <- omitmirna[,index]
mirna.control <- omitmirna[,!index]
# Calculate means
mean_control <- rowMeans(mirna.control[,2:length(mirna.control)])
mean_case <- rowMeans(mirna.case[,2:length(mirna.case)])
# Include means in omitmirna
mirna_d[[4]] <- mean_case
mirna_d[[5]] <- mean_control
colnames(mirna_d) <- c("log-ratio", "P-Value", "P-adjust", "mean_case", "mean_control")
# # Set first column of phenotype data as rowname
# rownames(pheno.mrna) <- pheno.mrna[,1]
# pheno.mrna <- pheno.mrna[,2:3]
# pheno.mirna <- pheno.mrna # pheno.mirna is identical to pheno.mrna (for clarity they both exist)
#
head(mirna)
stats::cor(mrna[1,], mirna[1,], method = method)
mrna[1,]
mirna[1,]
stats::cor(-2.5, 1.83, method = method)
negative_cor(mrna_data = as.matrix(mrna), mirna_data = as.matrix(mirna),
method = c("pearson"), cut.off = -0.5)
?seq_len()
seq_len(nrow(data_1)
a<-seq_len(nrow(data_1)
seq_len(nrow(data_1))
seq_len(3)
data(mrna)
data(mrna)
data(mirna)
data(pheno.mirna)
data(pheno.mrna)
pheno.mrna
View(pheno.mrna)
mrna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mrna),
colData = pheno.mrna)
mirna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mirna),
colData = pheno.mirna)
mrna_d <- differExp_discrete(se = mrna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
mirna_d <- differExp_discrete(se = mirna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
View(mirna_se)
library(anamiR)
data(mrna)
data(mirna)
data(pheno.mirna)
data(pheno.mrna)
mrna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mrna),
colData = pheno.mrna)
mirna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mirna),
colData = pheno.mirna)
mrna_d <- differExp_discrete(se = mrna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
mirna_d <- differExp_discrete(se = mirna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
data(mrna)
data(mirna)
data(pheno.mirna)
data(pheno.mrna)
mrna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mrna),
colData = pheno.mrna)
mirna_se <- SummarizedExperiment::SummarizedExperiment(
assays = S4Vectors::SimpleList(counts=mirna),
colData = pheno.mirna)
se <- normalization(data = mirna, method = "quantile")
mrna_d <- differExp_discrete(se = mrna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
mrna_d <- differExp_discrete(se = mrna_se,
class = "ER", method = "limma",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
mrna_d <- differExp_discrete(se = mrna_se,
class = "ER", method = "wilcox.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
mirna_d <- differExp_discrete(se = mirna_se,
class = "ER", method = "t.test",
t_test.var = FALSE, log2 = FALSE,
p_value.cutoff = 0.05,  logratio = 0.5
)
View(pheno.mirna)
View(mrna)
cor(1.8, c(2.6, 1.4, -0.8, -1.2))
cor(c(2.6, 1.4, -0.8, -1.2), c(2.6, 1.4, -0.8, -1.2))
cor(c-(2.6, 1.4, -0.8, -1.2), c(2.6, 1.4, -0.8, -1.2))
cor(c(-2.6, -1.4, 0.8, 1.2), c(2.6, 1.4, -0.8, -1.2))
-cor(c(-2.6, -1.4, 0.8, 1.2), c(2.6, 1.4, -0.8, -1.2))
source('C:/Users/jipde/OneDrive/school/1. Master/Project_01/Code/Github/Code/Expression_Analysis.R')
for (row in mirna[1:10,]){
print(row)
}
for (row in mirna[1:10,]){
print("row:")
print(row)
}
