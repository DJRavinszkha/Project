mirna.batches <- data.frame(batch = labels$miRNA.batch, batch.id = labels$miRNA.batch.id, file = labels$mRNA.file)
# get mirna treatment order
mirna.treatmentOrder <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(mirna.treatmentOrder) <- "sampleName"
mirna.treatmentOrder[,1] <- colnames(mirna)
mirna.treatmentOrder <- merge(mirna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
mirna.treatmentOrder <- mirna.treatmentOrder[order(mirna.treatmentOrder$treatment.id),] #order based on treatment ID
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mrna.meta <- read.delim("../Data/metadata_mrna.csv", sep=',',header = TRUE, colClasses = 'character')
conf <- data.frame(sample.name = mrna.meta$Sample[1:28], sex = mrna.meta$gender[1:28], age = mrna.meta$age[1:28], bili.tot = mrna.meta$Bili..tot.[1:28])
conf$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf$sex.id) #Create a factor of sex, as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age<- c(73.5, 76.4, 67.7, 63, 55.1, 84.5, 24.3, 72.1, 71.7, 70.3, 73.4, 51.5, 52.5, 49.5, 59.2, 57.8, 56.7, 48.1, 66.1, 67.2, 67.6,
41.5, 74.7, 36.3, 75.4, 74.2, 77.8, 59.9) # change to get the data from conf$sex.id but having trouble due to integer/double type.
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE),batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control", "batch2","batch3","batch4","batch5","sex","age")
conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
fit <- lmFit(mrna, design2)
fit_contrast_DvC = contrasts.fit(fit, conmat_DvC)
fit_contrast_DvC = eBayes(fit_contrast_DvC)
fit_contrast_CHvC = contrasts.fit(fit, conmat_CHvC)
fit_contrast_CHvC = eBayes(fit_contrast_CHvC)
fit_contrast_CHvD= contrasts.fit(fit, conmat_CHvD)
fit_contrast_CHvD = eBayes(fit_contrast_CHvD)
result_DvC = decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC = decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD = decideTests(fit_contrast_CHvD)
summary(result_CHvD)
#----------------------------------------------------------#
top_genes_DvC = topTable(fit_contrast_DvC, lfc = 1.2, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvC = topTable(fit_contrast_CHvC,lfc = 1.2, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvD = topTable(fit_contrast_CHvD,lfc = 1.2, p.value=0.05, number = nrow(mrna), adjust = "BH")
names_top_DvC <-rownames(top_genes_DvC)
names_top_CHvC<-rownames(top_genes_CHvC)
names_top_CHvD<-rownames(top_genes_CHvD)
#----------------------------------------------------------#
top_genes_DvC = topTable(fit_contrast_DvC, lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvC = topTable(fit_contrast_CHvC,lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvD = topTable(fit_contrast_CHvD,lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
design <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(design) <- "sampleName"
design[,1] <- colnames(mirna)
design <- merge(design, sampleGroups, by = "sampleName", sort = FALSE)
design1 <- model.matrix(~ 0 + factor(labels$treatment.id))
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mirna.meta <- read.delim("../Data/metadata_mirna.csv", sep=',',header = TRUE, colClasses = 'character')
conf.mirna <- data.frame(sample.name = mirna.meta$Sample[1:28], sex = mirna.meta$gender[1:28], age = mirna.meta$age[1:28], bili.tot = mirna.meta$Bili..tot.[1:28])
conf.mirna$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf.mirna$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf.mirna$sex.id) #Create a factor of sex, as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age<- c(73.5, 63.0, 72.1, 73.4, 49.5, 57.8, 66.1, 41.5, 75.4, 76.4, 67.7, 84.5, 71.7, 51.5, 59.2, 56.7,
67.2, 74.7, 77.8, 55.1, 24.3, 70.3, 52.5, 48.1, 67.6, 36.3, 74.2, 59.9)
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(labels$miRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control", "batch2","batch3","batch4","batch5","sex","age")
conmat_multi <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design2)
mirna.conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
mirna.conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
mirna.conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
fit.mirna <- lmFit(mirna, design2)
fit_contrast_multi = contrasts.fit(fit.mirna, conmat_multi)
fit_contrast_multi = eBayes(fit_contrast_multi)
fit_contrast_DvC = contrasts.fit(fit.mirna, conmat_DvC)
fit_contrast_DvC = eBayes(fit_contrast_DvC)
fit_contrast_CHvC = contrasts.fit(fit.mirna, conmat_CHvC)
fit_contrast_CHvC = eBayes(fit_contrast_CHvC)
fit_contrast_CHvD= contrasts.fit(fit.mirna, conmat_CHvD)
fit_contrast_CHvD = eBayes(fit_contrast_CHvD)
#----------------------------------------------
result_multi = decideTests(fit_contrast_multi)
summary(result_multi)
result_DvC = decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC = decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD = decideTests(fit_contrast_CHvD)
summary(result_CHvD)
ptop_genes_DvC = topTable(fit_contrast_DvC, lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
ptop_genes_CHvC = topTable(fit_contrast_CHvC,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
ptop_genes_CHvD = topTable(fit_contrast_CHvD,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
ptop_genes_multi =  topTable(fit_contrast_multi,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mirna.meta <- read.delim("../Data/metadata_mirna.csv", sep=',',header = TRUE, colClasses = 'character')
conf.mirna <- data.frame(sample.name = mirna.meta$Sample[1:28], sex = mirna.meta$gender[1:28], age = mirna.meta$age[1:28], bili.tot = mirna.meta$Bili..tot.[1:28])
conf.mirna$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf.mirna$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf.mirna$sex.id) #Create a factor of sex, as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age<- c(73.5, 63.0, 72.1, 73.4, 49.5, 57.8, 66.1, 41.5, 75.4, 76.4, 67.7, 84.5, 71.7, 51.5, 59.2, 56.7,
67.2, 74.7, 77.8, 55.1, 24.3, 70.3, 52.5, 48.1, 67.6, 36.3, 74.2, 59.9)
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(labels$miRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
View(design2)
colnames(design2) <- c("cholestasis", "drained", "control", "batch2","batch3","batch4","batch5","sex","age")
View(design2)
labels$miRNA.batch.id
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(mirna.batches) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
labels$miRNA.batch.id
mirna.batches$batch.id
mirna.treatmentOrder$treatment.id
labels$treatment.id
fit_contrast_DvC = eBayes(contrasts.fit(fit, conmat_DvC))
#-----------------------------------------------------------#
# linear model fitting
fit <- lmFit(mrna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit, conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit, conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit, conmat_CHvD))
result_DvC = decideTests(fit_contrast_DvC)
result_DvC <- decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC <- decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD <- decideTests(fit_contrast_CHvD)
sampleGroups <- data.frame(treatment = labels$treatment, treatment.id = labels$treatment.id, sampleName = labels$sample.name)
# Get batch order mrna (copied from pca)
mrna.batches <- data.frame(batch = labels$mRNA.batch, batch.id = labels$mRNA.batch.id, file = labels$mRNA.file)
# Get batch order mirna (copied from pca)
mirna.batches <- data.frame(batch = labels$miRNA.batch, batch.id = labels$miRNA.batch.id, file = labels$mRNA.file)
# get mirna treatment order
mirna.treatmentOrder <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(mirna.treatmentOrder) <- "sampleName"
mirna.treatmentOrder[,1] <- colnames(mirna)
mirna.treatmentOrder <- merge(mirna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
mirna.treatmentOrder <- mirna.treatmentOrder[order(mirna.treatmentOrder$treatment.id),] #order based on treatment ID
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mrna.meta <- read.delim("../Data/metadata_mrna.csv", sep=',',header = TRUE, colClasses = 'character')
conf <- data.frame(sample.name = mrna.meta$Sample[1:28], sex = mrna.meta$gender[1:28], age = mrna.meta$age[1:28], bili.tot = mrna.meta$Bili..tot.[1:28])
conf$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf$sex.id) #Create a factor of sex, as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age<- c(73.5, 76.4, 67.7, 63, 55.1, 84.5, 24.3, 72.1, 71.7, 70.3, 73.4, 51.5, 52.5, 49.5, 59.2, 57.8, 56.7, 48.1, 66.1, 67.2, 67.6,
41.5, 74.7, 36.3, 75.4, 74.2, 77.8, 59.9) # change to get the data from conf$sex.id but having trouble due to integer/double type.
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE),batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control", "batch2","batch3","batch4","batch5","sex","age")
# Contrast matrices
conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
#-----------------------------------------------------------#
# linear model fitting
fit <- lmFit(mrna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit, conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit, conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit, conmat_CHvD))
result_DvC <- decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC <- decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD <- decideTests(fit_contrast_CHvD)
summary(result_CHvD)
mirna.meta <- read.delim("../Data/metadata_mirna.csv", sep=',',header = TRUE, colClasses = 'character')
conf.mirna <- data.frame(sample.name = mirna.meta$Sample[1:28], sex = mirna.meta$gender[1:28], age = mirna.meta$age[1:28], bili.tot = mirna.meta$Bili..tot.[1:28])
View(conf.mirna)
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex.mirna + age.mirna,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
sex.mirna<- factor(conf$sex.id) #Create a factor of sex, as confounder
# Age for confounder.
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
# WARNING: DIFFERENT ORDER THAN MRNA AGE
age.mirna<- c(73.5, 76.4, 67.7, 63, 55.1, 84.5, 24.3, 72.1, 71.7, 70.3, 73.4, 51.5, 52.5, 49.5, 59.2, 57.8, 56.7, 48.1, 66.1, 67.2, 67.6,
41.5, 74.7, 36.3, 75.4, 74.2, 77.8, 59.9) # change to get the data from conf$sex.id but having trouble due to integer/double type.
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex.mirna + age.mirna,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
# Sex as confounder
conf.mirna$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf.mirna$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf.mirna$sex.id) #Create a factor of sex, as confounder
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(labels$miRNA.batch.id) + sex.mirna + age.mirna,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control",
"batch2","batch3","batch4","batch5",
"sex","age")
conmat_multi <- makeContrasts (drained_v_control = drained - control,
cholestasis_v_control = cholestasis - control,
cholestasis_v_drained = cholestasis - drained,
levels = design2)
mirna.conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
mirna.conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
mirna.conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
fit.mirna <- lmFit(mirna, design2)
#=============================================================================#
# Project Period, Liver cholestasis data analysis         							      #
#	Data Formatting                                                             #
# Version: 1.0   															                                #
# Date: 9-1-2020											             	                          #
# Authors: Ariadna Fosch i Muntané, ID: I6215203, Maastricht University       #
#          Jip de Kok, ID: I6119367 , Maastricht University                   #
#          Ravin Schmidl, ID: I6125866, Maastricht University                 #
#          Stefan Meier, ID: I6114194 , Maastricht University                 #
#=============================================================================#
#=========================================#
##         Install libraries             ##
#=========================================#
library(limma)
library(rstudioapi)
#===================#
## Data Formatting ##
#===================#
format <- function(){
# Get data in correct format
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
mrna = read.delim('../Data/GeneExpressionNormalized.txt', check.names = FALSE) #Load expression data
mirna = read.delim('../Data/miRNAexpression.txt', check.names = FALSE)        #Load miRNA expression data
#colnames(mrna)[10] <- "FGS_10_410978_2_3_H"                                   #Change the name of one variable due to error
#Initialise a dataframe called labels, containing all:
# file/batch names and sample names
# batch numbers and an int id attached to it
# treatments and an int id attached to it
labels = read.delim("../Data/colNames.csv", sep = ',', header = FALSE, colClasses = 'character')
labels$V4 <- colnames(mrna[3:30])
key <- mrna[,1:2] # Key for maintaining gene symbol and entrez gene ID
labels$V1 <- colnames(mirna[2:29]) #maintaining names for mirna filenames
#Here we initialise batch number id's of mRNA's
labels$V5 <- substr(unlist(labels$V4), 8, 13)
labels$V6[labels$V5 == "410978"] <- 1 #set id 1 to mRNA batch
labels$V6[labels$V5 == "410979"] <- 2 #set id 2
labels$V6[labels$V5 == "410980"] <- 3 #set id 3
labels$V6[labels$V5 == "412287"] <- 4 #set id 4
labels$V6[labels$V5 == "422569"] <- 5 #set id 5
#Here we initialise batch number id's for miRNA's
labels$V7 <- substr(unlist(labels$V1), 12, 23)
labels$V8[labels$V7 == "254606410403"] <- 1 #set id 1 to miRNA batch
labels$V8[labels$V7 == "254606410404"] <- 2 #set id 2
labels$V8[labels$V7 == "254606411109"] <- 5 #set id 3
labels$V8[labels$V7 == "254606410405"] <- 3 #set id 4
labels$V8[labels$V7 == "254606410413"] <- 4 #set id 5
#Change the names of the columns
colnames(labels) <- c("miRNA.file", "treatment", "sample.name", "mRNA.file", "mRNA.batch", "mRNA.batch.id", "miRNA.batch", "miRNA.batch.id")
#=== Here we initialise the treatment numbers ===
sampleGroups <- read.delim("../Data/SampleGroups.csv", sep = ',', header = TRUE, colClasses = 'character')
sampleGroups <- sampleGroups[,6:7]
labels$treatment.id[labels$treatment == "cholestatic"] <- 1 #set id 1 to cholestatic treatment
labels$treatment.id[labels$treatment == "drained"] <- 2     #set id 2 to drained treatment
labels$treatment.id[labels$treatment == "control"] <- 3     #set id 3 to control treatment
# Column names are different for miRNA and mRNA datasets, but are conserved with sample names in SampleGroups.xlsx
#IE FGS_01 is the name of sample 1;
#where miRNA sample is US10063773_254606410403_S01_miRNA_107_Sep09_1_1 - 2;
#and mRNA sample is FGS_01_410978_1_1
#=== Here we change the columns names of mrna (mRNA samples) to the sample names ===
mrna = subset(mrna, select = -2)                     # Remove gene symbol column
columns = colnames(mrna)
columns[2:29] <- substr(unlist(columns[2:29]), 1, 6) #Only keep first 6 characters of column names
colnames(mrna) <- columns                            # Assign this to the actual column names
#=== Here we change the columns names of mirna (miRNA samples) to the sample names ===
#
# columns[[1]] <- 'miRNA'
# for (i in rep(2:length(colnames(mirna)))){
#   for ( j in rep(1:nrow(labels))){
#     if(colnames(mirna[i]) == labels[j,1]){
#       columns[[i]] = labels[j,3] # Assign correct column name to array
#       # print(labels[j,1])
#       # print(colnames(mirna[i]))
#       # print(labels[j, 3])
#       # print("======")
#     }
#   }
# }
#There is something wrong with naming as FGS_01 is not the first columns and last column is NA
#mrna
rownames(mrna) <- mrna[,1] # Set entrezid as index for mrna; can use key to find gene symbols based on index
mrna <- mrna[,2:29]        # Set mrna to only contain expression values
#mirna
rownames(mirna) <- mirna[,1] # Set mirna names as index for mirna
mirna <- mirna[,2:29]        # Set mirna to only contain expression values
colnames(mirna) <- labels$sample.name[order(labels$treatment.id)] ##REQUIRED!!!! in order to preserve order of miRNA sample naming
#=============================#
##   Create phenotype data   ##     # Do we need this?
#=============================#
# pheno.mrna = labels
# pheno.mrna[[1]] <- colnames(mrna)
# colnames(pheno.mrna) <- c("", "Subtype", "ER")
#
# # Set controls
# case <- pheno.mrna[,'Subtype'] == "cholestatic"
# pheno.mrna[case,3] <- 'case'
#
# # Set drained
# case <- pheno.mrna[,'Subtype'] == "drained"
# pheno.mrna[case,3] <- 'case'
#
# # set controls
# case <- pheno.mrna[,'Subtype'] == "control"
# pheno.mrna[case,3] <- 'control'
#
# # Order cases and controls
# pheno.mrna <- pheno.mrna[order(as.character(pheno.mrna$ER)),]
#
# # Set pheno.mirna which is identical to pheno.mrna
# pheno.mirna = pheno.mrna
#
#===============================#
## Summarised experiment class ##   #Do we need this?
#===============================#
# First we change the dataframes into matrices as the miRrna package works with matrices.
# pheno.mrna <- as.matrix(pheno.mrna)
# pheno.mirna <- as.matrix(pheno.mirna)
# mrna = data.matrix(mrna)
# mirna = data.matrix(mirna)
#
# # Fill NA's with mean for the time-being
# mrna[is.na(mrna)] <- mean(mrna, na.rm = TRUE)
# mirna[is.na(mirna)] <- mean(mirna, na.rm = TRUE)
#
# # Remove drained cases from mrna
# index = rep(TRUE, length(colnames(mrna)))
# for(i in 1:length(colnames(mrna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mrna)[i] %in% pheno.mrna[pheno.mrna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mrna <- mrna[,index]
#
# # Remove drained cases from mirna
# index = rep(TRUE, length(colnames(mirna)))
# for(i in 1:length(colnames(mirna))){
#   # if current column name is present in a list of all column names of cases:
#   if(colnames(mirna)[i] %in% pheno.mirna[pheno.mirna[,2]=="drained",1]){
#     index[i] <- FALSE
#   }
# }
# mirna <- mirna[,index]
#
# # Remove drained cases from the phenotype data
# pheno.mrna <- pheno.mrna[!(pheno.mrna[,2]=="drained"),]
# pheno.mirna <- pheno.mirna[!(pheno.mirna[,2]=="drained"),]
return(list(mrna, mirna, labels, key))
}
Data <- format() #Remember to run dataFormatting.R first before initialising data
mrna <- data.frame(Data[1]) #mRNA expression data (contains entrez ID as index)
mirna <- data.frame(Data[2]) #miRNA expression data (contains miRNA name as index)
labels <- data.frame(Data[3]) #batch and treatment id/labels for samples
key <- data.frame(Data[4]) #entrezID to genesymbol key
sampleGroups <- data.frame(treatment = labels$treatment, treatment.id = labels$treatment.id, sampleName = labels$sample.name)
# Get batch order mrna (copied from pca)
mrna.batches <- data.frame(batch = labels$mRNA.batch, batch.id = labels$mRNA.batch.id, file = labels$mRNA.file)
# Get batch order mirna (copied from pca)
mirna.batches <- data.frame(batch = labels$miRNA.batch, batch.id = labels$miRNA.batch.id, file = labels$mRNA.file)
# get mirna treatment order
mirna.treatmentOrder <- matrix(nrow = (ncol(mirna)), ncol = 1)
colnames(mirna.treatmentOrder) <- "sampleName"
mirna.treatmentOrder[,1] <- colnames(mirna)
mirna.treatmentOrder <- merge(mirna.treatmentOrder, sampleGroups, by = "sampleName", sort = FALSE)
mirna.treatmentOrder <- mirna.treatmentOrder[order(mirna.treatmentOrder$treatment.id),] #order based on treatment ID
#Initialise metadata (age, sex and bilirubin lvels). Move to dataFormatting.R.
#Refer to whatsapp files to download correct file,
mrna.meta <- read.delim("../Data/metadata_mrna.csv", sep=',',header = TRUE, colClasses = 'character')
conf <- data.frame(sample.name = mrna.meta$Sample[1:28], sex = mrna.meta$gender[1:28], age = mrna.meta$age[1:28], bili.tot = mrna.meta$Bili..tot.[1:28])
# Sex adjustment to get factor for desing matrix
conf$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex<- factor(conf$sex.id) #Create a factor of sex, as confounder
# Age for confounder.
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
# WARNING: DIFFERENT ORDER THAN age mirna
age<- c(73.5, 76.4, 67.7, 63, 55.1, 84.5, 24.3, 72.1, 71.7, 70.3, 73.4, 51.5, 52.5, 49.5, 59.2, 57.8, 56.7, 48.1, 66.1, 67.2, 67.6,
41.5, 74.7, 36.3, 75.4, 74.2, 77.8, 59.9) # change to get the data from conf$sex.id but having trouble due to integer/double type.
design2 <- model.matrix(~ 0 + factor(labels$treatment.id) + factor(labels$mRNA.batch.id) + sex + age,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control",
"batch2","batch3","batch4","batch5",
"sex","age")
# Contrast matrices
conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
#-----------------------------------------------------------#
# linear model fitting
fit <- lmFit(mrna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit, conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit, conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit, conmat_CHvD))
#--------------------------------------------------------#
# Results for lmfit
result_DvC <- decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC <- decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD <- decideTests(fit_contrast_CHvD)
summary(result_CHvD)
#----------------------------------------------------------#
# Find significant DEGs with log fold change higher than (lfc).
top_genes_DvC = topTable(fit_contrast_DvC, lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvC = topTable(fit_contrast_CHvC,lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
top_genes_CHvD = topTable(fit_contrast_CHvD,lfc = 1.5, p.value=0.05, number = nrow(mrna), adjust = "BH")
# Save Entrez ID of DEGs
names_top_DvC <-rownames(top_genes_DvC)
names_top_CHvC<-rownames(top_genes_CHvC)
names_top_CHvD<-rownames(top_genes_CHvD)
# Find gene symbols
symb.DvC<- key$Genesymbol[match(names_top_DvC,key$EntrezID)]
symb.CHvC<- key$Genesymbol[match(names_top_CHvC,key$EntrezID)]
symb.CHvD<- key$Genesymbol[match(names_top_CHvD,key$EntrezID)]
# Create DEG dataframe
DEG_DvC<- data.frame(Gene.Symb=symb.DvC, logFC= top_genes_DvC$logFC,adj.p= top_genes_DvC$adj.P.Val)
DEG_CHvC<- data.frame(Gene.Symb=symb.CHvC,logFC= top_genes_CHvC$logFC,adj.p= top_genes_CHvC$adj.P.Val)
rownames(DEG_CHvC)<- names_top_CHvC
DEG_CHvD<- data.frame(Gene.Symb=symb.CHvD,logFC= top_genes_CHvD$logFC,adj.p= top_genes_CHvD$adj.P.Val)
rownames(DEG_CHvD)<- names_top_CHvD
mirna.meta <- read.delim("../Data/metadata_mirna.csv", sep=',',header = TRUE, colClasses = 'character')
conf.mirna <- data.frame(sample.name = mirna.meta$Sample[1:28], sex = mirna.meta$gender[1:28], age = mirna.meta$age[1:28], bili.tot = mirna.meta$Bili..tot.[1:28])
# Sex as confounder
conf.mirna$sex.id[conf$sex == "M"] <- 1 #change male to 1
conf.mirna$sex.id[conf$sex == "F"] <- 2 #change female to 2
sex.mirna<- factor(conf.mirna$sex.id) #Create a factor of sex, as confounder
# Age as confounder
#age<- as.numeric(conf$age) #DidnÂ´t create factor due to number of unique ages; therefore kept it a vector
age.mirna<- c(73.5, 63.0, 72.1, 73.4, 49.5, 57.8, 66.1, 41.5, 75.4, 76.4, 67.7, 84.5, 71.7, 51.5, 59.2, 56.7,
67.2, 74.7, 77.8, 55.1, 24.3, 70.3, 52.5, 48.1, 67.6, 36.3, 74.2, 59.9)
# Create desing matrix mirna
design2 <- model.matrix(~ 0 + factor(mirna.treatmentOrder$treatment.id) + factor(labels$miRNA.batch.id) + sex.mirna + age.mirna,
contrast.arg=list(state=contrasts(state, contrasts=TRUE), batch=contrasts(batch, contrasts = TRUE)))
colnames(design2) <- c("cholestasis", "drained", "control",
"batch2","batch3","batch4","batch5",
"sex","age")
# Create contrast matrices mirna
mirna.conmat_DvC = makeContrasts(drained_v_control = drained - control,
levels = design2)
mirna.conmat_CHvC = makeContrasts(cholestasis_v_control = cholestasis - control,
levels = design2)
mirna.conmat_CHvD = makeContrasts(cholestasis_v_drained = cholestasis - drained,
levels = design2)
#----------------------------------------------
# Model fitting mirna
fit.mirna <- lmFit(mirna, design2)
fit_contrast_DvC = eBayes(contrasts.fit(fit.mirna, mirna.conmat_DvC))
fit_contrast_CHvC = eBayes(contrasts.fit(fit.mirna, mirna.conmat_CHvC))
fit_contrast_CHvD= eBayes(contrasts.fit(fit.mirna, mirna.conmat_CHvD))
result_DvC = decideTests(fit_contrast_DvC)
summary(result_DvC)
result_CHvC = decideTests(fit_contrast_CHvC)
summary(result_CHvC)
result_CHvD = decideTests(fit_contrast_CHvD)
summary(result_CHvD)
mirna.top_genes_DvC = topTable(fit_contrast_DvC, lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvC = topTable(fit_contrast_CHvC,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvD = topTable(fit_contrast_CHvD,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_multi =  topTable(fit_contrast_multi,lfc=1.5, p.value=0.05, number = nrow(mirna), adjust = "BH")
# Save Entrez ID of DEGs
mirna.names_top_DvC <-rownames(mirna.top_genes_DvC)
mirna.names_top_CHvC<-rownames(mirna.top_genes_CHvC)
mirna.names_top_CHvD<-rownames(mirna.top_genes_CHvD)
# Find gene symbols
mirna.symb.DvC<- key$Genesymbol[match(mirna.names_top_DvC, key$EntrezID)]
mirna.symb.CHvC<- key$Genesymbol[match(mirna.names_top_CHvC, key$EntrezID)]
mirna.symb.CHvD<- key$Genesymbol[match(mirna.names_top_CHvD, key$EntrezID)]
# Create DEG dataframe
mirna.DEG_DvC<- data.frame(Gene.Symb=mirna.symb.DvC, logFC= mirna.top_genes_DvC$logFC,adj.p= mirna.top_genes_DvC$adj.P.Val)
mirna.DEG_CHvC<- data.frame(Gene.Symb=mirna.symb.CHvC,logFC= mirna.top_genes_CHvC$logFC, adj.p= mirna.top_genes_CHvC$adj.P.Val)
rownames(DEG_CHvC)<- mirna.names_top_CHvC
mirna.DEG_CHvD<- data.frame(Gene.Symb=mirna.symb.CHvD,logFC= mirna.top_genes_CHvD$logFC, adj.p= mirna.top_genes_CHvD$adj.P.Val)
rownames(DEG_CHvD)<- mirna.names_top_CHvD
View(mirna.top_genes_CHvC)
mirna.top_genes_DvC = topTable(fit_contrast_DvC, lfc=1.2, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvC = topTable(fit_contrast_CHvC,lfc=1.2, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_CHvD = topTable(fit_contrast_CHvD,lfc=1.2, p.value=0.05, number = nrow(mirna), adjust = "BH")
mirna.top_genes_multi =  topTable(fit_contrast_multi,lfc=1.2, p.value=0.05, number = nrow(mirna), adjust = "BH")
# Save Entrez ID of DEGs
mirna.names_top_DvC <-rownames(mirna.top_genes_DvC)
mirna.names_top_CHvC<-rownames(mirna.top_genes_CHvC)
mirna.names_top_CHvD<-rownames(mirna.top_genes_CHvD)
# Find gene symbols
mirna.symb.DvC<- key$Genesymbol[match(mirna.names_top_DvC, key$EntrezID)]
mirna.symb.CHvC<- key$Genesymbol[match(mirna.names_top_CHvC, key$EntrezID)]
mirna.symb.CHvD<- key$Genesymbol[match(mirna.names_top_CHvD, key$EntrezID)]
# Create DEG dataframe
mirna.DEG_DvC<- data.frame(Gene.Symb=mirna.symb.DvC, logFC= mirna.top_genes_DvC$logFC,adj.p= mirna.top_genes_DvC$adj.P.Val)
mirna.DEG_CHvC<- data.frame(Gene.Symb=mirna.symb.CHvC,logFC= mirna.top_genes_CHvC$logFC, adj.p= mirna.top_genes_CHvC$adj.P.Val)
rownames(DEG_CHvC)<- mirna.names_top_CHvC
mirna.DEG_CHvD<- data.frame(Gene.Symb=mirna.symb.CHvD,logFC= mirna.top_genes_CHvD$logFC, adj.p= mirna.top_genes_CHvD$adj.P.Val)
rownames(DEG_CHvD)<- mirna.names_top_CHvD
View(mirna.top_genes_CHvC)
View(top_genes_CHvC)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
library(topGO)
